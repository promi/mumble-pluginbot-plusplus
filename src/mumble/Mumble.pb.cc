// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mumble.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mumble.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MumbleProto
{

  namespace
  {

    const ::google::protobuf::Descriptor* Version_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    Version_reflection_ = NULL;
    const ::google::protobuf::Descriptor* UDPTunnel_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    UDPTunnel_reflection_ = NULL;
    const ::google::protobuf::Descriptor* Authenticate_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    Authenticate_reflection_ = NULL;
    const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    Ping_reflection_ = NULL;
    const ::google::protobuf::Descriptor* Reject_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    Reject_reflection_ = NULL;
    const ::google::protobuf::EnumDescriptor* Reject_RejectType_descriptor_ = NULL;
    const ::google::protobuf::Descriptor* ServerSync_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ServerSync_reflection_ = NULL;
    const ::google::protobuf::Descriptor* ChannelRemove_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ChannelRemove_reflection_ = NULL;
    const ::google::protobuf::Descriptor* ChannelState_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ChannelState_reflection_ = NULL;
    const ::google::protobuf::Descriptor* UserRemove_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    UserRemove_reflection_ = NULL;
    const ::google::protobuf::Descriptor* UserState_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    UserState_reflection_ = NULL;
    const ::google::protobuf::Descriptor* BanList_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    BanList_reflection_ = NULL;
    const ::google::protobuf::Descriptor* BanList_BanEntry_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    BanList_BanEntry_reflection_ = NULL;
    const ::google::protobuf::Descriptor* TextMessage_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    TextMessage_reflection_ = NULL;
    const ::google::protobuf::Descriptor* PermissionDenied_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    PermissionDenied_reflection_ = NULL;
    const ::google::protobuf::EnumDescriptor* PermissionDenied_DenyType_descriptor_
      = NULL;
    const ::google::protobuf::Descriptor* ACL_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ACL_reflection_ = NULL;
    const ::google::protobuf::Descriptor* ACL_ChanGroup_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ACL_ChanGroup_reflection_ = NULL;
    const ::google::protobuf::Descriptor* ACL_ChanACL_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ACL_ChanACL_reflection_ = NULL;
    const ::google::protobuf::Descriptor* QueryUsers_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    QueryUsers_reflection_ = NULL;
    const ::google::protobuf::Descriptor* CryptSetup_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    CryptSetup_reflection_ = NULL;
    const ::google::protobuf::Descriptor* ContextActionModify_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ContextActionModify_reflection_ = NULL;
    const ::google::protobuf::EnumDescriptor*
    ContextActionModify_Context_descriptor_ = NULL;
    const ::google::protobuf::EnumDescriptor*
    ContextActionModify_Operation_descriptor_ = NULL;
    const ::google::protobuf::Descriptor* ContextAction_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ContextAction_reflection_ = NULL;
    const ::google::protobuf::Descriptor* UserList_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    UserList_reflection_ = NULL;
    const ::google::protobuf::Descriptor* UserList_User_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    UserList_User_reflection_ = NULL;
    const ::google::protobuf::Descriptor* VoiceTarget_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    VoiceTarget_reflection_ = NULL;
    const ::google::protobuf::Descriptor* VoiceTarget_Target_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    VoiceTarget_Target_reflection_ = NULL;
    const ::google::protobuf::Descriptor* PermissionQuery_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    PermissionQuery_reflection_ = NULL;
    const ::google::protobuf::Descriptor* CodecVersion_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    CodecVersion_reflection_ = NULL;
    const ::google::protobuf::Descriptor* UserStats_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    UserStats_reflection_ = NULL;
    const ::google::protobuf::Descriptor* UserStats_Stats_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    UserStats_Stats_reflection_ = NULL;
    const ::google::protobuf::Descriptor* RequestBlob_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    RequestBlob_reflection_ = NULL;
    const ::google::protobuf::Descriptor* ServerConfig_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    ServerConfig_reflection_ = NULL;
    const ::google::protobuf::Descriptor* SuggestConfig_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection*
    SuggestConfig_reflection_ = NULL;

  }  // namespace


  void protobuf_AssignDesc_Mumble_2eproto()
  {
    protobuf_AddDesc_Mumble_2eproto();
    const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
        "Mumble.proto");
    GOOGLE_CHECK(file != NULL);
    Version_descriptor_ = file->message_type(0);
    static const int Version_offsets_[4] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, version_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, release_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, os_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, os_version_),
    };
    Version_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      Version_descriptor_,
      Version::default_instance_,
      Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Version));
    UDPTunnel_descriptor_ = file->message_type(1);
    static const int UDPTunnel_offsets_[1] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDPTunnel, packet_),
    };
    UDPTunnel_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      UDPTunnel_descriptor_,
      UDPTunnel::default_instance_,
      UDPTunnel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDPTunnel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDPTunnel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UDPTunnel));
    Authenticate_descriptor_ = file->message_type(2);
    static const int Authenticate_offsets_[5] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, username_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, password_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, tokens_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, celt_versions_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, opus_),
    };
    Authenticate_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      Authenticate_descriptor_,
      Authenticate::default_instance_,
      Authenticate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authenticate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Authenticate));
    Ping_descriptor_ = file->message_type(3);
    static const int Ping_offsets_[11] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, timestamp_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, good_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, late_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, lost_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, resync_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, udp_packets_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, tcp_packets_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, udp_ping_avg_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, udp_ping_var_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, tcp_ping_avg_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, tcp_ping_var_),
    };
    Ping_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
    Reject_descriptor_ = file->message_type(4);
    static const int Reject_offsets_[2] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reject, type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reject, reason_),
    };
    Reject_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      Reject_descriptor_,
      Reject::default_instance_,
      Reject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reject));
    Reject_RejectType_descriptor_ = Reject_descriptor_->enum_type(0);
    ServerSync_descriptor_ = file->message_type(5);
    static const int ServerSync_offsets_[4] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, session_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, max_bandwidth_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, welcome_text_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, permissions_),
    };
    ServerSync_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerSync_descriptor_,
      ServerSync::default_instance_,
      ServerSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerSync));
    ChannelRemove_descriptor_ = file->message_type(6);
    static const int ChannelRemove_offsets_[1] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRemove, channel_id_),
    };
    ChannelRemove_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelRemove_descriptor_,
      ChannelRemove::default_instance_,
      ChannelRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelRemove));
    ChannelState_descriptor_ = file->message_type(7);
    static const int ChannelState_offsets_[11] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, channel_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, parent_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, links_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, description_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, links_add_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, links_remove_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, temporary_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, position_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, description_hash_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, max_users_),
    };
    ChannelState_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelState_descriptor_,
      ChannelState::default_instance_,
      ChannelState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelState));
    UserRemove_descriptor_ = file->message_type(8);
    static const int UserRemove_offsets_[4] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, session_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, actor_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, reason_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, ban_),
    };
    UserRemove_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRemove_descriptor_,
      UserRemove::default_instance_,
      UserRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRemove));
    UserState_descriptor_ = file->message_type(9);
    static const int UserState_offsets_[19] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, session_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, actor_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, user_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, channel_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, mute_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, deaf_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, suppress_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, self_mute_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, self_deaf_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, texture_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, plugin_context_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, plugin_identity_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, comment_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, hash_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, comment_hash_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, texture_hash_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, priority_speaker_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, recording_),
    };
    UserState_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      UserState_descriptor_,
      UserState::default_instance_,
      UserState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserState));
    BanList_descriptor_ = file->message_type(10);
    static const int BanList_offsets_[2] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList, bans_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList, query_),
    };
    BanList_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      BanList_descriptor_,
      BanList::default_instance_,
      BanList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BanList));
    BanList_BanEntry_descriptor_ = BanList_descriptor_->nested_type(0);
    static const int BanList_BanEntry_offsets_[7] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, address_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, mask_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, hash_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, reason_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, start_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, duration_),
    };
    BanList_BanEntry_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      BanList_BanEntry_descriptor_,
      BanList_BanEntry::default_instance_,
      BanList_BanEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BanList_BanEntry,
          _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BanList_BanEntry));
    TextMessage_descriptor_ = file->message_type(11);
    static const int TextMessage_offsets_[5] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, actor_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, session_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, channel_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, tree_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, message_),
    };
    TextMessage_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      TextMessage_descriptor_,
      TextMessage::default_instance_,
      TextMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextMessage));
    PermissionDenied_descriptor_ = file->message_type(12);
    static const int PermissionDenied_offsets_[6] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, permission_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, channel_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, session_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, reason_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, name_),
    };
    PermissionDenied_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      PermissionDenied_descriptor_,
      PermissionDenied::default_instance_,
      PermissionDenied_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionDenied,
          _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PermissionDenied));
    PermissionDenied_DenyType_descriptor_ = PermissionDenied_descriptor_->enum_type(
        0);
    ACL_descriptor_ = file->message_type(13);
    static const int ACL_offsets_[5] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, channel_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, inherit_acls_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, groups_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, acls_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, query_),
    };
    ACL_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ACL_descriptor_,
      ACL::default_instance_,
      ACL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACL));
    ACL_ChanGroup_descriptor_ = ACL_descriptor_->nested_type(0);
    static const int ACL_ChanGroup_offsets_[7] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, inherited_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, inherit_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, inheritable_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, add_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, remove_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, inherited_members_),
    };
    ACL_ChanGroup_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ACL_ChanGroup_descriptor_,
      ACL_ChanGroup::default_instance_,
      ACL_ChanGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACL_ChanGroup));
    ACL_ChanACL_descriptor_ = ACL_descriptor_->nested_type(1);
    static const int ACL_ChanACL_offsets_[7] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, apply_here_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, apply_subs_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, inherited_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, user_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, group_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, grant_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, deny_),
    };
    ACL_ChanACL_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ACL_ChanACL_descriptor_,
      ACL_ChanACL::default_instance_,
      ACL_ChanACL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ChanACL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACL_ChanACL));
    QueryUsers_descriptor_ = file->message_type(14);
    static const int QueryUsers_offsets_[2] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsers, ids_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsers, names_),
    };
    QueryUsers_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUsers_descriptor_,
      QueryUsers::default_instance_,
      QueryUsers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUsers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUsers));
    CryptSetup_descriptor_ = file->message_type(15);
    static const int CryptSetup_offsets_[3] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, key_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, client_nonce_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, server_nonce_),
    };
    CryptSetup_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      CryptSetup_descriptor_,
      CryptSetup::default_instance_,
      CryptSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CryptSetup));
    ContextActionModify_descriptor_ = file->message_type(16);
    static const int ContextActionModify_offsets_[4] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, action_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, text_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, context_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify, operation_),
    };
    ContextActionModify_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ContextActionModify_descriptor_,
      ContextActionModify::default_instance_,
      ContextActionModify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify,
          _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextActionModify,
          _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContextActionModify));
    ContextActionModify_Context_descriptor_ =
      ContextActionModify_descriptor_->enum_type(0);
    ContextActionModify_Operation_descriptor_ =
      ContextActionModify_descriptor_->enum_type(1);
    ContextAction_descriptor_ = file->message_type(17);
    static const int ContextAction_offsets_[3] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, session_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, channel_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, action_),
    };
    ContextAction_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ContextAction_descriptor_,
      ContextAction::default_instance_,
      ContextAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContextAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContextAction));
    UserList_descriptor_ = file->message_type(18);
    static const int UserList_offsets_[1] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, users_),
    };
    UserList_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      UserList_descriptor_,
      UserList::default_instance_,
      UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserList));
    UserList_User_descriptor_ = UserList_descriptor_->nested_type(0);
    static const int UserList_User_offsets_[4] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, user_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, name_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, last_seen_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, last_channel_),
    };
    UserList_User_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      UserList_User_descriptor_,
      UserList_User::default_instance_,
      UserList_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserList_User));
    VoiceTarget_descriptor_ = file->message_type(19);
    static const int VoiceTarget_offsets_[2] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget, id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget, targets_),
    };
    VoiceTarget_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      VoiceTarget_descriptor_,
      VoiceTarget::default_instance_,
      VoiceTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoiceTarget));
    VoiceTarget_Target_descriptor_ = VoiceTarget_descriptor_->nested_type(0);
    static const int VoiceTarget_Target_offsets_[5] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, session_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, channel_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, group_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, links_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target, children_),
    };
    VoiceTarget_Target_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      VoiceTarget_Target_descriptor_,
      VoiceTarget_Target::default_instance_,
      VoiceTarget_Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target,
          _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceTarget_Target,
          _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoiceTarget_Target));
    PermissionQuery_descriptor_ = file->message_type(20);
    static const int PermissionQuery_offsets_[3] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, channel_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, permissions_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, flush_),
    };
    PermissionQuery_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      PermissionQuery_descriptor_,
      PermissionQuery::default_instance_,
      PermissionQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermissionQuery,
          _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PermissionQuery));
    CodecVersion_descriptor_ = file->message_type(21);
    static const int CodecVersion_offsets_[4] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, alpha_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, beta_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, prefer_alpha_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, opus_),
    };
    CodecVersion_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      CodecVersion_descriptor_,
      CodecVersion::default_instance_,
      CodecVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodecVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CodecVersion));
    UserStats_descriptor_ = file->message_type(22);
    static const int UserStats_offsets_[19] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, session_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, stats_only_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, certificates_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, from_client_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, from_server_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, udp_packets_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, tcp_packets_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, udp_ping_avg_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, udp_ping_var_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, tcp_ping_avg_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, tcp_ping_var_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, version_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, celt_versions_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, address_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, bandwidth_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, onlinesecs_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, idlesecs_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, strong_certificate_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, opus_),
    };
    UserStats_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStats_descriptor_,
      UserStats::default_instance_,
      UserStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStats));
    UserStats_Stats_descriptor_ = UserStats_descriptor_->nested_type(0);
    static const int UserStats_Stats_offsets_[4] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, good_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, late_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, lost_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, resync_),
    };
    UserStats_Stats_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStats_Stats_descriptor_,
      UserStats_Stats::default_instance_,
      UserStats_Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStats_Stats,
          _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStats_Stats));
    RequestBlob_descriptor_ = file->message_type(23);
    static const int RequestBlob_offsets_[3] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, session_texture_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, session_comment_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, channel_description_),
    };
    RequestBlob_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBlob_descriptor_,
      RequestBlob::default_instance_,
      RequestBlob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBlob));
    ServerConfig_descriptor_ = file->message_type(24);
    static const int ServerConfig_offsets_[6] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, max_bandwidth_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, welcome_text_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, allow_html_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, message_length_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, image_message_length_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, max_users_),
    };
    ServerConfig_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerConfig_descriptor_,
      ServerConfig::default_instance_,
      ServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerConfig));
    SuggestConfig_descriptor_ = file->message_type(25);
    static const int SuggestConfig_offsets_[3] =
    {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, version_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, positional_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, push_to_talk_),
    };
    SuggestConfig_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
      SuggestConfig_descriptor_,
      SuggestConfig::default_instance_,
      SuggestConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuggestConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuggestConfig));
  }

  namespace
  {

    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
    inline void protobuf_AssignDescriptorsOnce()
    {
      ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                         &protobuf_AssignDesc_Mumble_2eproto);
    }

    void protobuf_RegisterTypes(const ::std::string&)
    {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Version_descriptor_, &Version::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UDPTunnel_descriptor_, &UDPTunnel::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Authenticate_descriptor_, &Authenticate::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Ping_descriptor_, &Ping::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Reject_descriptor_, &Reject::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ServerSync_descriptor_, &ServerSync::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ChannelRemove_descriptor_, &ChannelRemove::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ChannelState_descriptor_, &ChannelState::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UserRemove_descriptor_, &UserRemove::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UserState_descriptor_, &UserState::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        BanList_descriptor_, &BanList::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        BanList_BanEntry_descriptor_, &BanList_BanEntry::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TextMessage_descriptor_, &TextMessage::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PermissionDenied_descriptor_, &PermissionDenied::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ACL_descriptor_, &ACL::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ACL_ChanGroup_descriptor_, &ACL_ChanGroup::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ACL_ChanACL_descriptor_, &ACL_ChanACL::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        QueryUsers_descriptor_, &QueryUsers::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CryptSetup_descriptor_, &CryptSetup::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ContextActionModify_descriptor_, &ContextActionModify::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ContextAction_descriptor_, &ContextAction::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UserList_descriptor_, &UserList::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UserList_User_descriptor_, &UserList_User::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        VoiceTarget_descriptor_, &VoiceTarget::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        VoiceTarget_Target_descriptor_, &VoiceTarget_Target::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PermissionQuery_descriptor_, &PermissionQuery::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        CodecVersion_descriptor_, &CodecVersion::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UserStats_descriptor_, &UserStats::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UserStats_Stats_descriptor_, &UserStats_Stats::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RequestBlob_descriptor_, &RequestBlob::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ServerConfig_descriptor_, &ServerConfig::default_instance());
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SuggestConfig_descriptor_, &SuggestConfig::default_instance());
    }

  }  // namespace

  void protobuf_ShutdownFile_Mumble_2eproto()
  {
    delete Version::default_instance_;
    delete Version_reflection_;
    delete UDPTunnel::default_instance_;
    delete UDPTunnel_reflection_;
    delete Authenticate::default_instance_;
    delete Authenticate_reflection_;
    delete Ping::default_instance_;
    delete Ping_reflection_;
    delete Reject::default_instance_;
    delete Reject_reflection_;
    delete ServerSync::default_instance_;
    delete ServerSync_reflection_;
    delete ChannelRemove::default_instance_;
    delete ChannelRemove_reflection_;
    delete ChannelState::default_instance_;
    delete ChannelState_reflection_;
    delete UserRemove::default_instance_;
    delete UserRemove_reflection_;
    delete UserState::default_instance_;
    delete UserState_reflection_;
    delete BanList::default_instance_;
    delete BanList_reflection_;
    delete BanList_BanEntry::default_instance_;
    delete BanList_BanEntry_reflection_;
    delete TextMessage::default_instance_;
    delete TextMessage_reflection_;
    delete PermissionDenied::default_instance_;
    delete PermissionDenied_reflection_;
    delete ACL::default_instance_;
    delete ACL_reflection_;
    delete ACL_ChanGroup::default_instance_;
    delete ACL_ChanGroup_reflection_;
    delete ACL_ChanACL::default_instance_;
    delete ACL_ChanACL_reflection_;
    delete QueryUsers::default_instance_;
    delete QueryUsers_reflection_;
    delete CryptSetup::default_instance_;
    delete CryptSetup_reflection_;
    delete ContextActionModify::default_instance_;
    delete ContextActionModify_reflection_;
    delete ContextAction::default_instance_;
    delete ContextAction_reflection_;
    delete UserList::default_instance_;
    delete UserList_reflection_;
    delete UserList_User::default_instance_;
    delete UserList_User_reflection_;
    delete VoiceTarget::default_instance_;
    delete VoiceTarget_reflection_;
    delete VoiceTarget_Target::default_instance_;
    delete VoiceTarget_Target_reflection_;
    delete PermissionQuery::default_instance_;
    delete PermissionQuery_reflection_;
    delete CodecVersion::default_instance_;
    delete CodecVersion_reflection_;
    delete UserStats::default_instance_;
    delete UserStats_reflection_;
    delete UserStats_Stats::default_instance_;
    delete UserStats_Stats_reflection_;
    delete RequestBlob::default_instance_;
    delete RequestBlob_reflection_;
    delete ServerConfig::default_instance_;
    delete ServerConfig_reflection_;
    delete SuggestConfig::default_instance_;
    delete SuggestConfig_reflection_;
  }

  void protobuf_AddDesc_Mumble_2eproto()
  {
    static bool already_here = false;
    if (already_here) return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\014Mumble.proto\022\013MumbleProto\"K\n\007Version\022\017"
      "\n\007version\030\001 \001(\r\022\017\n\007release\030\002 \001(\t\022\n\n\002os\030\003"
      " \001(\t\022\022\n\nos_version\030\004 \001(\t\"\033\n\tUDPTunnel\022\016\n"
      "\006packet\030\001 \002(\014\"n\n\014Authenticate\022\020\n\010usernam"
      "e\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\016\n\006tokens\030\003 \003("
      "\t\022\025\n\rcelt_versions\030\004 \003(\005\022\023\n\004opus\030\005 \001(\010:\005"
      "false\"\325\001\n\004Ping\022\021\n\ttimestamp\030\001 \001(\004\022\014\n\004goo"
      "d\030\002 \001(\r\022\014\n\004late\030\003 \001(\r\022\014\n\004lost\030\004 \001(\r\022\016\n\006r"
      "esync\030\005 \001(\r\022\023\n\013udp_packets\030\006 \001(\r\022\023\n\013tcp_"
      "packets\030\007 \001(\r\022\024\n\014udp_ping_avg\030\010 \001(\002\022\024\n\014u"
      "dp_ping_var\030\t \001(\002\022\024\n\014tcp_ping_avg\030\n \001(\002\022"
      "\024\n\014tcp_ping_var\030\013 \001(\002\"\367\001\n\006Reject\022,\n\004type"
      "\030\001 \001(\0162\036.MumbleProto.Reject.RejectType\022\016"
      "\n\006reason\030\002 \001(\t\"\256\001\n\nRejectType\022\010\n\004None\020\000\022"
      "\020\n\014WrongVersion\020\001\022\023\n\017InvalidUsername\020\002\022\017"
      "\n\013WrongUserPW\020\003\022\021\n\rWrongServerPW\020\004\022\021\n\rUs"
      "ernameInUse\020\005\022\016\n\nServerFull\020\006\022\021\n\rNoCerti"
      "ficate\020\007\022\025\n\021AuthenticatorFail\020\010\"_\n\nServe"
      "rSync\022\017\n\007session\030\001 \001(\r\022\025\n\rmax_bandwidth\030"
      "\002 \001(\r\022\024\n\014welcome_text\030\003 \001(\t\022\023\n\013permissio"
      "ns\030\004 \001(\004\"#\n\rChannelRemove\022\022\n\nchannel_id\030"
      "\001 \002(\r\"\351\001\n\014ChannelState\022\022\n\nchannel_id\030\001 \001"
      "(\r\022\016\n\006parent\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\r\n\005link"
      "s\030\004 \003(\r\022\023\n\013description\030\005 \001(\t\022\021\n\tlinks_ad"
      "d\030\006 \003(\r\022\024\n\014links_remove\030\007 \003(\r\022\030\n\ttempora"
      "ry\030\010 \001(\010:\005false\022\023\n\010position\030\t \001(\005:\0010\022\030\n\020"
      "description_hash\030\n \001(\014\022\021\n\tmax_users\030\013 \001("
      "\r\"I\n\nUserRemove\022\017\n\007session\030\001 \002(\r\022\r\n\005acto"
      "r\030\002 \001(\r\022\016\n\006reason\030\003 \001(\t\022\013\n\003ban\030\004 \001(\010\"\354\002\n"
      "\tUserState\022\017\n\007session\030\001 \001(\r\022\r\n\005actor\030\002 \001"
      "(\r\022\014\n\004name\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\r\022\022\n\ncha"
      "nnel_id\030\005 \001(\r\022\014\n\004mute\030\006 \001(\010\022\014\n\004deaf\030\007 \001("
      "\010\022\020\n\010suppress\030\010 \001(\010\022\021\n\tself_mute\030\t \001(\010\022\021"
      "\n\tself_deaf\030\n \001(\010\022\017\n\007texture\030\013 \001(\014\022\026\n\016pl"
      "ugin_context\030\014 \001(\014\022\027\n\017plugin_identity\030\r "
      "\001(\t\022\017\n\007comment\030\016 \001(\t\022\014\n\004hash\030\017 \001(\t\022\024\n\014co"
      "mment_hash\030\020 \001(\014\022\024\n\014texture_hash\030\021 \001(\014\022\030"
      "\n\020priority_speaker\030\022 \001(\010\022\021\n\trecording\030\023 "
      "\001(\010\"\304\001\n\007BanList\022+\n\004bans\030\001 \003(\0132\035.MumblePr"
      "oto.BanList.BanEntry\022\024\n\005query\030\002 \001(\010:\005fal"
      "se\032v\n\010BanEntry\022\017\n\007address\030\001 \002(\014\022\014\n\004mask\030"
      "\002 \002(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004hash\030\004 \001(\t\022\016\n\006rea"
      "son\030\005 \001(\t\022\r\n\005start\030\006 \001(\t\022\020\n\010duration\030\007 \001"
      "(\r\"c\n\013TextMessage\022\r\n\005actor\030\001 \001(\r\022\017\n\007sess"
      "ion\030\002 \003(\r\022\022\n\nchannel_id\030\003 \003(\r\022\017\n\007tree_id"
      "\030\004 \003(\r\022\017\n\007message\030\005 \002(\t\"\337\002\n\020PermissionDe"
      "nied\022\022\n\npermission\030\001 \001(\r\022\022\n\nchannel_id\030\002"
      " \001(\r\022\017\n\007session\030\003 \001(\r\022\016\n\006reason\030\004 \001(\t\0224\n"
      "\004type\030\005 \001(\0162&.MumbleProto.PermissionDeni"
      "ed.DenyType\022\014\n\004name\030\006 \001(\t\"\275\001\n\010DenyType\022\010"
      "\n\004Text\020\000\022\016\n\nPermission\020\001\022\r\n\tSuperUser\020\002\022"
      "\017\n\013ChannelName\020\003\022\017\n\013TextTooLong\020\004\022\007\n\003H9K"
      "\020\005\022\024\n\020TemporaryChannel\020\006\022\026\n\022MissingCerti"
      "ficate\020\007\022\014\n\010UserName\020\010\022\017\n\013ChannelFull\020\t\022"
      "\020\n\014NestingLimit\020\n\"\324\003\n\003ACL\022\022\n\nchannel_id\030"
      "\001 \002(\r\022\032\n\014inherit_acls\030\002 \001(\010:\004true\022*\n\006gro"
      "ups\030\003 \003(\0132\032.MumbleProto.ACL.ChanGroup\022&\n"
      "\004acls\030\004 \003(\0132\030.MumbleProto.ACL.ChanACL\022\024\n"
      "\005query\030\005 \001(\010:\005false\032\234\001\n\tChanGroup\022\014\n\004nam"
      "e\030\001 \002(\t\022\027\n\tinherited\030\002 \001(\010:\004true\022\025\n\007inhe"
      "rit\030\003 \001(\010:\004true\022\031\n\013inheritable\030\004 \001(\010:\004tr"
      "ue\022\013\n\003add\030\005 \003(\r\022\016\n\006remove\030\006 \003(\r\022\031\n\021inher"
      "ited_members\030\007 \003(\r\032\223\001\n\007ChanACL\022\030\n\napply_"
      "here\030\001 \001(\010:\004true\022\030\n\napply_subs\030\002 \001(\010:\004tr"
      "ue\022\027\n\tinherited\030\003 \001(\010:\004true\022\017\n\007user_id\030\004"
      " \001(\r\022\r\n\005group\030\005 \001(\t\022\r\n\005grant\030\006 \001(\r\022\014\n\004de"
      "ny\030\007 \001(\r\"(\n\nQueryUsers\022\013\n\003ids\030\001 \003(\r\022\r\n\005n"
      "ames\030\002 \003(\t\"E\n\nCryptSetup\022\013\n\003key\030\001 \001(\014\022\024\n"
      "\014client_nonce\030\002 \001(\014\022\024\n\014server_nonce\030\003 \001("
      "\014\"\323\001\n\023ContextActionModify\022\016\n\006action\030\001 \002("
      "\t\022\014\n\004text\030\002 \001(\t\022\017\n\007context\030\003 \001(\r\022=\n\toper"
      "ation\030\004 \001(\0162*.MumbleProto.ContextActionM"
      "odify.Operation\",\n\007Context\022\n\n\006Server\020\001\022\013"
      "\n\007Channel\020\002\022\010\n\004User\020\004\" \n\tOperation\022\007\n\003Ad"
      "d\020\000\022\n\n\006Remove\020\001\"D\n\rContextAction\022\017\n\007sess"
      "ion\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\r\022\016\n\006action\030"
      "\003 \002(\t\"\205\001\n\010UserList\022)\n\005users\030\001 \003(\0132\032.Mumb"
      "leProto.UserList.User\032N\n\004User\022\017\n\007user_id"
      "\030\001 \002(\r\022\014\n\004name\030\002 \001(\t\022\021\n\tlast_seen\030\003 \001(\t\022"
      "\024\n\014last_channel\030\004 \001(\r\"\270\001\n\013VoiceTarget\022\n\n"
      "\002id\030\001 \001(\r\0220\n\007targets\030\002 \003(\0132\037.MumbleProto"
      ".VoiceTarget.Target\032k\n\006Target\022\017\n\007session"
      "\030\001 \003(\r\022\022\n\nchannel_id\030\002 \001(\r\022\r\n\005group\030\003 \001("
      "\t\022\024\n\005links\030\004 \001(\010:\005false\022\027\n\010children\030\005 \001("
      "\010:\005false\"P\n\017PermissionQuery\022\022\n\nchannel_i"
      "d\030\001 \001(\r\022\023\n\013permissions\030\002 \001(\r\022\024\n\005flush\030\003 "
      "\001(\010:\005false\"\\\n\014CodecVersion\022\r\n\005alpha\030\001 \002("
      "\005\022\014\n\004beta\030\002 \002(\005\022\032\n\014prefer_alpha\030\003 \002(\010:\004t"
      "rue\022\023\n\004opus\030\004 \001(\010:\005false\"\270\004\n\tUserStats\022\017"
      "\n\007session\030\001 \001(\r\022\031\n\nstats_only\030\002 \001(\010:\005fal"
      "se\022\024\n\014certificates\030\003 \003(\014\0221\n\013from_client\030"
      "\004 \001(\0132\034.MumbleProto.UserStats.Stats\0221\n\013f"
      "rom_server\030\005 \001(\0132\034.MumbleProto.UserStats"
      ".Stats\022\023\n\013udp_packets\030\006 \001(\r\022\023\n\013tcp_packe"
      "ts\030\007 \001(\r\022\024\n\014udp_ping_avg\030\010 \001(\002\022\024\n\014udp_pi"
      "ng_var\030\t \001(\002\022\024\n\014tcp_ping_avg\030\n \001(\002\022\024\n\014tc"
      "p_ping_var\030\013 \001(\002\022%\n\007version\030\014 \001(\0132\024.Mumb"
      "leProto.Version\022\025\n\rcelt_versions\030\r \003(\005\022\017"
      "\n\007address\030\016 \001(\014\022\021\n\tbandwidth\030\017 \001(\r\022\022\n\non"
      "linesecs\030\020 \001(\r\022\020\n\010idlesecs\030\021 \001(\r\022!\n\022stro"
      "ng_certificate\030\022 \001(\010:\005false\022\023\n\004opus\030\023 \001("
      "\010:\005false\032A\n\005Stats\022\014\n\004good\030\001 \001(\r\022\014\n\004late\030"
      "\002 \001(\r\022\014\n\004lost\030\003 \001(\r\022\016\n\006resync\030\004 \001(\r\"\\\n\013R"
      "equestBlob\022\027\n\017session_texture\030\001 \003(\r\022\027\n\017s"
      "ession_comment\030\002 \003(\r\022\033\n\023channel_descript"
      "ion\030\003 \003(\r\"\230\001\n\014ServerConfig\022\025\n\rmax_bandwi"
      "dth\030\001 \001(\r\022\024\n\014welcome_text\030\002 \001(\t\022\022\n\nallow"
      "_html\030\003 \001(\010\022\026\n\016message_length\030\004 \001(\r\022\034\n\024i"
      "mage_message_length\030\005 \001(\r\022\021\n\tmax_users\030\006"
      " \001(\r\"J\n\rSuggestConfig\022\017\n\007version\030\001 \001(\r\022\022"
      "\n\npositional\030\002 \001(\010\022\024\n\014push_to_talk\030\003 \001(\010"
      "B\002H\001", 4444);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "Mumble.proto", &protobuf_RegisterTypes);
    Version::default_instance_ = new Version();
    UDPTunnel::default_instance_ = new UDPTunnel();
    Authenticate::default_instance_ = new Authenticate();
    Ping::default_instance_ = new Ping();
    Reject::default_instance_ = new Reject();
    ServerSync::default_instance_ = new ServerSync();
    ChannelRemove::default_instance_ = new ChannelRemove();
    ChannelState::default_instance_ = new ChannelState();
    UserRemove::default_instance_ = new UserRemove();
    UserState::default_instance_ = new UserState();
    BanList::default_instance_ = new BanList();
    BanList_BanEntry::default_instance_ = new BanList_BanEntry();
    TextMessage::default_instance_ = new TextMessage();
    PermissionDenied::default_instance_ = new PermissionDenied();
    ACL::default_instance_ = new ACL();
    ACL_ChanGroup::default_instance_ = new ACL_ChanGroup();
    ACL_ChanACL::default_instance_ = new ACL_ChanACL();
    QueryUsers::default_instance_ = new QueryUsers();
    CryptSetup::default_instance_ = new CryptSetup();
    ContextActionModify::default_instance_ = new ContextActionModify();
    ContextAction::default_instance_ = new ContextAction();
    UserList::default_instance_ = new UserList();
    UserList_User::default_instance_ = new UserList_User();
    VoiceTarget::default_instance_ = new VoiceTarget();
    VoiceTarget_Target::default_instance_ = new VoiceTarget_Target();
    PermissionQuery::default_instance_ = new PermissionQuery();
    CodecVersion::default_instance_ = new CodecVersion();
    UserStats::default_instance_ = new UserStats();
    UserStats_Stats::default_instance_ = new UserStats_Stats();
    RequestBlob::default_instance_ = new RequestBlob();
    ServerConfig::default_instance_ = new ServerConfig();
    SuggestConfig::default_instance_ = new SuggestConfig();
    Version::default_instance_->InitAsDefaultInstance();
    UDPTunnel::default_instance_->InitAsDefaultInstance();
    Authenticate::default_instance_->InitAsDefaultInstance();
    Ping::default_instance_->InitAsDefaultInstance();
    Reject::default_instance_->InitAsDefaultInstance();
    ServerSync::default_instance_->InitAsDefaultInstance();
    ChannelRemove::default_instance_->InitAsDefaultInstance();
    ChannelState::default_instance_->InitAsDefaultInstance();
    UserRemove::default_instance_->InitAsDefaultInstance();
    UserState::default_instance_->InitAsDefaultInstance();
    BanList::default_instance_->InitAsDefaultInstance();
    BanList_BanEntry::default_instance_->InitAsDefaultInstance();
    TextMessage::default_instance_->InitAsDefaultInstance();
    PermissionDenied::default_instance_->InitAsDefaultInstance();
    ACL::default_instance_->InitAsDefaultInstance();
    ACL_ChanGroup::default_instance_->InitAsDefaultInstance();
    ACL_ChanACL::default_instance_->InitAsDefaultInstance();
    QueryUsers::default_instance_->InitAsDefaultInstance();
    CryptSetup::default_instance_->InitAsDefaultInstance();
    ContextActionModify::default_instance_->InitAsDefaultInstance();
    ContextAction::default_instance_->InitAsDefaultInstance();
    UserList::default_instance_->InitAsDefaultInstance();
    UserList_User::default_instance_->InitAsDefaultInstance();
    VoiceTarget::default_instance_->InitAsDefaultInstance();
    VoiceTarget_Target::default_instance_->InitAsDefaultInstance();
    PermissionQuery::default_instance_->InitAsDefaultInstance();
    CodecVersion::default_instance_->InitAsDefaultInstance();
    UserStats::default_instance_->InitAsDefaultInstance();
    UserStats_Stats::default_instance_->InitAsDefaultInstance();
    RequestBlob::default_instance_->InitAsDefaultInstance();
    ServerConfig::default_instance_->InitAsDefaultInstance();
    SuggestConfig::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mumble_2eproto);
  }

// Force AddDescriptors() to be called at static initialization time.
  struct StaticDescriptorInitializer_Mumble_2eproto
  {
    StaticDescriptorInitializer_Mumble_2eproto()
    {
      protobuf_AddDesc_Mumble_2eproto();
    }
  } static_descriptor_initializer_Mumble_2eproto_;

// ===================================================================

#ifndef _MSC_VER
  const int Version::kVersionFieldNumber;
  const int Version::kReleaseFieldNumber;
  const int Version::kOsFieldNumber;
  const int Version::kOsVersionFieldNumber;
#endif  // !_MSC_VER

  Version::Version()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.Version)
  }

  void Version::InitAsDefaultInstance()
  {
  }

  Version::Version(const Version& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.Version)
  }

  void Version::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    version_ = 0u;
    release_ = const_cast< ::std::string*>
               (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    os_ = const_cast< ::std::string*>
          (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    os_version_ = const_cast< ::std::string*>
                  (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  Version::~Version()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.Version)
    SharedDtor();
  }

  void Version::SharedDtor()
  {
    if (release_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete release_;
      }
    if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete os_;
      }
    if (os_version_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete os_version_;
      }
    if (this != default_instance_)
      {
      }
  }

  void Version::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* Version::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return Version_descriptor_;
  }

  const Version& Version::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  Version* Version::default_instance_ = NULL;

  Version* Version::New() const
  {
    return new Version;
  }

  void Version::Clear()
  {
    if (_has_bits_[0 / 32] & 15)
      {
        version_ = 0u;
        if (has_release())
          {
            if (release_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                release_->clear();
              }
          }
        if (has_os())
          {
            if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                os_->clear();
              }
          }
        if (has_os_version())
          {
            if (os_version_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                os_version_->clear();
              }
          }
      }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.Version)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 version = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &version_)));
                set_has_version();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_release;
            break;
          }

          // optional string release = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_release:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_release()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->release().data(), this->release().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "release");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_os;
            break;
          }

          // optional string os = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_os:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_os()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->os().data(), this->os().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "os");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(34)) goto parse_os_version;
            break;
          }

          // optional string os_version = 4;
          case 4:
          {
            if (tag == 34)
              {
parse_os_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_os_version()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->os_version().data(), this->os_version().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "os_version");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.Version)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.Version)
    return false;
#undef DO_
  }

  void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.Version)
    // optional uint32 version = 1;
    if (has_version())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(),
            output);
      }

    // optional string release = 2;
    if (has_release())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->release().data(), this->release().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "release");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          2, this->release(), output);
      }

    // optional string os = 3;
    if (has_os())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->os().data(), this->os().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "os");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->os(), output);
      }

    // optional string os_version = 4;
    if (has_os_version())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->os_version().data(), this->os_version().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "os_version");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          4, this->os_version(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.Version)
  }

  ::google::protobuf::uint8* Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Version)
    // optional uint32 version = 1;
    if (has_version())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->version(), target);
      }

    // optional string release = 2;
    if (has_release())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->release().data(), this->release().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "release");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            2, this->release(), target);
      }

    // optional string os = 3;
    if (has_os())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->os().data(), this->os().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "os");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->os(), target);
      }

    // optional string os_version = 4;
    if (has_os_version())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->os_version().data(), this->os_version().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "os_version");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            4, this->os_version(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Version)
    return target;
  }

  int Version::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 version = 1;
        if (has_version())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->version());
          }

        // optional string release = 2;
        if (has_release())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->release());
          }

        // optional string os = 3;
        if (has_os())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->os());
          }

        // optional string os_version = 4;
        if (has_os_version())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->os_version());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void Version::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const Version* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const Version*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void Version::MergeFrom(const Version& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_version())
          {
            set_version(from.version());
          }
        if (from.has_release())
          {
            set_release(from.release());
          }
        if (from.has_os())
          {
            set_os(from.os());
          }
        if (from.has_os_version())
          {
            set_os_version(from.os_version());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void Version::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Version::CopyFrom(const Version& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Version::IsInitialized() const
  {

    return true;
  }

  void Version::Swap(Version* other)
  {
    if (other != this)
      {
        std::swap(version_, other->version_);
        std::swap(release_, other->release_);
        std::swap(os_, other->os_);
        std::swap(os_version_, other->os_version_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata Version::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = Version_descriptor_;
    metadata.reflection = Version_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int UDPTunnel::kPacketFieldNumber;
#endif  // !_MSC_VER

  UDPTunnel::UDPTunnel()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.UDPTunnel)
  }

  void UDPTunnel::InitAsDefaultInstance()
  {
  }

  UDPTunnel::UDPTunnel(const UDPTunnel& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.UDPTunnel)
  }

  void UDPTunnel::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    packet_ = const_cast< ::std::string*>
              (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  UDPTunnel::~UDPTunnel()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.UDPTunnel)
    SharedDtor();
  }

  void UDPTunnel::SharedDtor()
  {
    if (packet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete packet_;
      }
    if (this != default_instance_)
      {
      }
  }

  void UDPTunnel::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* UDPTunnel::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return UDPTunnel_descriptor_;
  }

  const UDPTunnel& UDPTunnel::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  UDPTunnel* UDPTunnel::default_instance_ = NULL;

  UDPTunnel* UDPTunnel::New() const
  {
    return new UDPTunnel;
  }

  void UDPTunnel::Clear()
  {
    if (has_packet())
      {
        if (packet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
          {
            packet_->clear();
          }
      }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool UDPTunnel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.UDPTunnel)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required bytes packet = 1;
          case 1:
          {
            if (tag == 10)
              {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_packet()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.UDPTunnel)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.UDPTunnel)
    return false;
#undef DO_
  }

  void UDPTunnel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.UDPTunnel)
    // required bytes packet = 1;
    if (has_packet())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          1, this->packet(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.UDPTunnel)
  }

  ::google::protobuf::uint8* UDPTunnel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UDPTunnel)
    // required bytes packet = 1;
    if (has_packet())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            1, this->packet(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UDPTunnel)
    return target;
  }

  int UDPTunnel::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required bytes packet = 1;
        if (has_packet())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->packet());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void UDPTunnel::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const UDPTunnel* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const UDPTunnel*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void UDPTunnel::MergeFrom(const UDPTunnel& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_packet())
          {
            set_packet(from.packet());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void UDPTunnel::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void UDPTunnel::CopyFrom(const UDPTunnel& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool UDPTunnel::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
  }

  void UDPTunnel::Swap(UDPTunnel* other)
  {
    if (other != this)
      {
        std::swap(packet_, other->packet_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata UDPTunnel::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = UDPTunnel_descriptor_;
    metadata.reflection = UDPTunnel_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int Authenticate::kUsernameFieldNumber;
  const int Authenticate::kPasswordFieldNumber;
  const int Authenticate::kTokensFieldNumber;
  const int Authenticate::kCeltVersionsFieldNumber;
  const int Authenticate::kOpusFieldNumber;
#endif  // !_MSC_VER

  Authenticate::Authenticate()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.Authenticate)
  }

  void Authenticate::InitAsDefaultInstance()
  {
  }

  Authenticate::Authenticate(const Authenticate& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.Authenticate)
  }

  void Authenticate::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    username_ = const_cast< ::std::string*>
                (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    password_ = const_cast< ::std::string*>
                (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    opus_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  Authenticate::~Authenticate()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.Authenticate)
    SharedDtor();
  }

  void Authenticate::SharedDtor()
  {
    if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete username_;
      }
    if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete password_;
      }
    if (this != default_instance_)
      {
      }
  }

  void Authenticate::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* Authenticate::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return Authenticate_descriptor_;
  }

  const Authenticate& Authenticate::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  Authenticate* Authenticate::default_instance_ = NULL;

  Authenticate* Authenticate::New() const
  {
    return new Authenticate;
  }

  void Authenticate::Clear()
  {
    if (_has_bits_[0 / 32] & 19)
      {
        if (has_username())
          {
            if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                username_->clear();
              }
          }
        if (has_password())
          {
            if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                password_->clear();
              }
          }
        opus_ = false;
      }
    tokens_.Clear();
    celt_versions_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool Authenticate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.Authenticate)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional string username = 1;
          case 1:
          {
            if (tag == 10)
              {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_username()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->username().data(), this->username().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "username");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_password;
            break;
          }

          // optional string password = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_password:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_password()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->password().data(), this->password().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "password");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_tokens;
            break;
          }

          // repeated string tokens = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_tokens:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->add_tokens()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->tokens(this->tokens_size() - 1).data(),
                  this->tokens(this->tokens_size() - 1).length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "tokens");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_tokens;
            if (input->ExpectTag(32)) goto parse_celt_versions;
            break;
          }

          // repeated int32 celt_versions = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_celt_versions:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                       1, 32, input, this->mutable_celt_versions())));
              }
            else if (tag == 34)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                       input, this->mutable_celt_versions())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_celt_versions;
            if (input->ExpectTag(40)) goto parse_opus;
            break;
          }

          // optional bool opus = 5 [default = false];
          case 5:
          {
            if (tag == 40)
              {
parse_opus:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &opus_)));
                set_has_opus();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.Authenticate)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.Authenticate)
    return false;
#undef DO_
  }

  void Authenticate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.Authenticate)
    // optional string username = 1;
    if (has_username())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->username().data(), this->username().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "username");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          1, this->username(), output);
      }

    // optional string password = 2;
    if (has_password())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->password().data(), this->password().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "password");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          2, this->password(), output);
      }

    // repeated string tokens = 3;
    for (int i = 0; i < this->tokens_size(); i++)
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->tokens(i).data(), this->tokens(i).length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tokens");
        ::google::protobuf::internal::WireFormatLite::WriteString(
          3, this->tokens(i), output);
      }

    // repeated int32 celt_versions = 4;
    for (int i = 0; i < this->celt_versions_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(
          4, this->celt_versions(i), output);
      }

    // optional bool opus = 5 [default = false];
    if (has_opus())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->opus(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.Authenticate)
  }

  ::google::protobuf::uint8* Authenticate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Authenticate)
    // optional string username = 1;
    if (has_username())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->username().data(), this->username().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "username");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            1, this->username(), target);
      }

    // optional string password = 2;
    if (has_password())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->password().data(), this->password().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "password");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            2, this->password(), target);
      }

    // repeated string tokens = 3;
    for (int i = 0; i < this->tokens_size(); i++)
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->tokens(i).data(), this->tokens(i).length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tokens");
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteStringToArray(3, this->tokens(i), target);
      }

    // repeated int32 celt_versions = 4;
    for (int i = 0; i < this->celt_versions_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteInt32ToArray(4, this->celt_versions(i), target);
      }

    // optional bool opus = 5 [default = false];
    if (has_opus())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5,
                 this->opus(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Authenticate)
    return target;
  }

  int Authenticate::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional string username = 1;
        if (has_username())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->username());
          }

        // optional string password = 2;
        if (has_password())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->password());
          }

        // optional bool opus = 5 [default = false];
        if (has_opus())
          {
            total_size += 1 + 1;
          }

      }
    // repeated string tokens = 3;
    total_size += 1 * this->tokens_size();
    for (int i = 0; i < this->tokens_size(); i++)
      {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->tokens(i));
      }

    // repeated int32 celt_versions = 4;
    {
      int data_size = 0;
      for (int i = 0; i < this->celt_versions_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       Int32Size(this->celt_versions(i));
        }
      total_size += 1 * this->celt_versions_size() + data_size;
    }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void Authenticate::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const Authenticate* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const Authenticate*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void Authenticate::MergeFrom(const Authenticate& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    tokens_.MergeFrom(from.tokens_);
    celt_versions_.MergeFrom(from.celt_versions_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_username())
          {
            set_username(from.username());
          }
        if (from.has_password())
          {
            set_password(from.password());
          }
        if (from.has_opus())
          {
            set_opus(from.opus());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void Authenticate::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Authenticate::CopyFrom(const Authenticate& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Authenticate::IsInitialized() const
  {

    return true;
  }

  void Authenticate::Swap(Authenticate* other)
  {
    if (other != this)
      {
        std::swap(username_, other->username_);
        std::swap(password_, other->password_);
        tokens_.Swap(&other->tokens_);
        celt_versions_.Swap(&other->celt_versions_);
        std::swap(opus_, other->opus_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata Authenticate::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = Authenticate_descriptor_;
    metadata.reflection = Authenticate_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int Ping::kTimestampFieldNumber;
  const int Ping::kGoodFieldNumber;
  const int Ping::kLateFieldNumber;
  const int Ping::kLostFieldNumber;
  const int Ping::kResyncFieldNumber;
  const int Ping::kUdpPacketsFieldNumber;
  const int Ping::kTcpPacketsFieldNumber;
  const int Ping::kUdpPingAvgFieldNumber;
  const int Ping::kUdpPingVarFieldNumber;
  const int Ping::kTcpPingAvgFieldNumber;
  const int Ping::kTcpPingVarFieldNumber;
#endif  // !_MSC_VER

  Ping::Ping()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.Ping)
  }

  void Ping::InitAsDefaultInstance()
  {
  }

  Ping::Ping(const Ping& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.Ping)
  }

  void Ping::SharedCtor()
  {
    _cached_size_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
    good_ = 0u;
    late_ = 0u;
    lost_ = 0u;
    resync_ = 0u;
    udp_packets_ = 0u;
    tcp_packets_ = 0u;
    udp_ping_avg_ = 0;
    udp_ping_var_ = 0;
    tcp_ping_avg_ = 0;
    tcp_ping_var_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  Ping::~Ping()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.Ping)
    SharedDtor();
  }

  void Ping::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void Ping::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* Ping::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return Ping_descriptor_;
  }

  const Ping& Ping::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  Ping* Ping::default_instance_ = NULL;

  Ping* Ping::New() const
  {
    return new Ping;
  }

  void Ping::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Ping*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 255)
      {
        ZR_(timestamp_, udp_ping_avg_);
      }
    ZR_(udp_ping_var_, tcp_ping_var_);

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.Ping)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint64 timestamp = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint64,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                       input, &timestamp_)));
                set_has_timestamp();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_good;
            break;
          }

          // optional uint32 good = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_good:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &good_)));
                set_has_good();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_late;
            break;
          }

          // optional uint32 late = 3;
          case 3:
          {
            if (tag == 24)
              {
parse_late:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &late_)));
                set_has_late();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_lost;
            break;
          }

          // optional uint32 lost = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_lost:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &lost_)));
                set_has_lost();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(40)) goto parse_resync;
            break;
          }

          // optional uint32 resync = 5;
          case 5:
          {
            if (tag == 40)
              {
parse_resync:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &resync_)));
                set_has_resync();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(48)) goto parse_udp_packets;
            break;
          }

          // optional uint32 udp_packets = 6;
          case 6:
          {
            if (tag == 48)
              {
parse_udp_packets:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &udp_packets_)));
                set_has_udp_packets();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(56)) goto parse_tcp_packets;
            break;
          }

          // optional uint32 tcp_packets = 7;
          case 7:
          {
            if (tag == 56)
              {
parse_tcp_packets:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &tcp_packets_)));
                set_has_tcp_packets();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(69)) goto parse_udp_ping_avg;
            break;
          }

          // optional float udp_ping_avg = 8;
          case 8:
          {
            if (tag == 69)
              {
parse_udp_ping_avg:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                       input, &udp_ping_avg_)));
                set_has_udp_ping_avg();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(77)) goto parse_udp_ping_var;
            break;
          }

          // optional float udp_ping_var = 9;
          case 9:
          {
            if (tag == 77)
              {
parse_udp_ping_var:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                       input, &udp_ping_var_)));
                set_has_udp_ping_var();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(85)) goto parse_tcp_ping_avg;
            break;
          }

          // optional float tcp_ping_avg = 10;
          case 10:
          {
            if (tag == 85)
              {
parse_tcp_ping_avg:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                       input, &tcp_ping_avg_)));
                set_has_tcp_ping_avg();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(93)) goto parse_tcp_ping_var;
            break;
          }

          // optional float tcp_ping_var = 11;
          case 11:
          {
            if (tag == 93)
              {
parse_tcp_ping_var:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                       input, &tcp_ping_var_)));
                set_has_tcp_ping_var();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.Ping)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.Ping)
    return false;
#undef DO_
  }

  void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.Ping)
    // optional uint64 timestamp = 1;
    if (has_timestamp())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(),
            output);
      }

    // optional uint32 good = 2;
    if (has_good())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->good(),
            output);
      }

    // optional uint32 late = 3;
    if (has_late())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->late(),
            output);
      }

    // optional uint32 lost = 4;
    if (has_lost())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lost(),
            output);
      }

    // optional uint32 resync = 5;
    if (has_resync())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resync(),
            output);
      }

    // optional uint32 udp_packets = 6;
    if (has_udp_packets())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(6,
            this->udp_packets(), output);
      }

    // optional uint32 tcp_packets = 7;
    if (has_tcp_packets())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(7,
            this->tcp_packets(), output);
      }

    // optional float udp_ping_avg = 8;
    if (has_udp_ping_avg())
      {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(8,
            this->udp_ping_avg(), output);
      }

    // optional float udp_ping_var = 9;
    if (has_udp_ping_var())
      {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9,
            this->udp_ping_var(), output);
      }

    // optional float tcp_ping_avg = 10;
    if (has_tcp_ping_avg())
      {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(10,
            this->tcp_ping_avg(), output);
      }

    // optional float tcp_ping_var = 11;
    if (has_tcp_ping_var())
      {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(11,
            this->tcp_ping_var(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.Ping)
  }

  ::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Ping)
    // optional uint64 timestamp = 1;
    if (has_timestamp())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1,
                 this->timestamp(), target);
      }

    // optional uint32 good = 2;
    if (has_good())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->good(), target);
      }

    // optional uint32 late = 3;
    if (has_late())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3,
                 this->late(), target);
      }

    // optional uint32 lost = 4;
    if (has_lost())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4,
                 this->lost(), target);
      }

    // optional uint32 resync = 5;
    if (has_resync())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5,
                 this->resync(), target);
      }

    // optional uint32 udp_packets = 6;
    if (has_udp_packets())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6,
                 this->udp_packets(), target);
      }

    // optional uint32 tcp_packets = 7;
    if (has_tcp_packets())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7,
                 this->tcp_packets(), target);
      }

    // optional float udp_ping_avg = 8;
    if (has_udp_ping_avg())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8,
                 this->udp_ping_avg(), target);
      }

    // optional float udp_ping_var = 9;
    if (has_udp_ping_var())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9,
                 this->udp_ping_var(), target);
      }

    // optional float tcp_ping_avg = 10;
    if (has_tcp_ping_avg())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10,
                 this->tcp_ping_avg(), target);
      }

    // optional float tcp_ping_var = 11;
    if (has_tcp_ping_var())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11,
                 this->tcp_ping_var(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Ping)
    return target;
  }

  int Ping::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint64 timestamp = 1;
        if (has_timestamp())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt64Size(
                            this->timestamp());
          }

        // optional uint32 good = 2;
        if (has_good())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->good());
          }

        // optional uint32 late = 3;
        if (has_late())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->late());
          }

        // optional uint32 lost = 4;
        if (has_lost())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->lost());
          }

        // optional uint32 resync = 5;
        if (has_resync())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->resync());
          }

        // optional uint32 udp_packets = 6;
        if (has_udp_packets())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->udp_packets());
          }

        // optional uint32 tcp_packets = 7;
        if (has_tcp_packets())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->tcp_packets());
          }

        // optional float udp_ping_avg = 8;
        if (has_udp_ping_avg())
          {
            total_size += 1 + 4;
          }

      }
    if (_has_bits_[8 / 32] & (0xffu << (8 % 32)))
      {
        // optional float udp_ping_var = 9;
        if (has_udp_ping_var())
          {
            total_size += 1 + 4;
          }

        // optional float tcp_ping_avg = 10;
        if (has_tcp_ping_avg())
          {
            total_size += 1 + 4;
          }

        // optional float tcp_ping_var = 11;
        if (has_tcp_ping_var())
          {
            total_size += 1 + 4;
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void Ping::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const Ping* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void Ping::MergeFrom(const Ping& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_timestamp())
          {
            set_timestamp(from.timestamp());
          }
        if (from.has_good())
          {
            set_good(from.good());
          }
        if (from.has_late())
          {
            set_late(from.late());
          }
        if (from.has_lost())
          {
            set_lost(from.lost());
          }
        if (from.has_resync())
          {
            set_resync(from.resync());
          }
        if (from.has_udp_packets())
          {
            set_udp_packets(from.udp_packets());
          }
        if (from.has_tcp_packets())
          {
            set_tcp_packets(from.tcp_packets());
          }
        if (from.has_udp_ping_avg())
          {
            set_udp_ping_avg(from.udp_ping_avg());
          }
      }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32)))
      {
        if (from.has_udp_ping_var())
          {
            set_udp_ping_var(from.udp_ping_var());
          }
        if (from.has_tcp_ping_avg())
          {
            set_tcp_ping_avg(from.tcp_ping_avg());
          }
        if (from.has_tcp_ping_var())
          {
            set_tcp_ping_var(from.tcp_ping_var());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void Ping::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Ping::CopyFrom(const Ping& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Ping::IsInitialized() const
  {

    return true;
  }

  void Ping::Swap(Ping* other)
  {
    if (other != this)
      {
        std::swap(timestamp_, other->timestamp_);
        std::swap(good_, other->good_);
        std::swap(late_, other->late_);
        std::swap(lost_, other->lost_);
        std::swap(resync_, other->resync_);
        std::swap(udp_packets_, other->udp_packets_);
        std::swap(tcp_packets_, other->tcp_packets_);
        std::swap(udp_ping_avg_, other->udp_ping_avg_);
        std::swap(udp_ping_var_, other->udp_ping_var_);
        std::swap(tcp_ping_avg_, other->tcp_ping_avg_);
        std::swap(tcp_ping_var_, other->tcp_ping_var_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata Ping::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = Ping_descriptor_;
    metadata.reflection = Ping_reflection_;
    return metadata;
  }


// ===================================================================

  const ::google::protobuf::EnumDescriptor* Reject_RejectType_descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return Reject_RejectType_descriptor_;
  }
  bool Reject_RejectType_IsValid(int value)
  {
    switch(value)
      {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
        return true;
      default:
        return false;
      }
  }

#ifndef _MSC_VER
  const Reject_RejectType Reject::None;
  const Reject_RejectType Reject::WrongVersion;
  const Reject_RejectType Reject::InvalidUsername;
  const Reject_RejectType Reject::WrongUserPW;
  const Reject_RejectType Reject::WrongServerPW;
  const Reject_RejectType Reject::UsernameInUse;
  const Reject_RejectType Reject::ServerFull;
  const Reject_RejectType Reject::NoCertificate;
  const Reject_RejectType Reject::AuthenticatorFail;
  const Reject_RejectType Reject::RejectType_MIN;
  const Reject_RejectType Reject::RejectType_MAX;
  const int Reject::RejectType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
  const int Reject::kTypeFieldNumber;
  const int Reject::kReasonFieldNumber;
#endif  // !_MSC_VER

  Reject::Reject()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.Reject)
  }

  void Reject::InitAsDefaultInstance()
  {
  }

  Reject::Reject(const Reject& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.Reject)
  }

  void Reject::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    type_ = 0;
    reason_ = const_cast< ::std::string*>
              (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  Reject::~Reject()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.Reject)
    SharedDtor();
  }

  void Reject::SharedDtor()
  {
    if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete reason_;
      }
    if (this != default_instance_)
      {
      }
  }

  void Reject::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* Reject::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return Reject_descriptor_;
  }

  const Reject& Reject::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  Reject* Reject::default_instance_ = NULL;

  Reject* Reject::New() const
  {
    return new Reject;
  }

  void Reject::Clear()
  {
    if (_has_bits_[0 / 32] & 3)
      {
        type_ = 0;
        if (has_reason())
          {
            if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                reason_->clear();
              }
          }
      }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool Reject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.Reject)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional .MumbleProto.Reject.RejectType type = 1;
          case 1:
          {
            if (tag == 8)
              {
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                       input, &value)));
                if (::MumbleProto::Reject_RejectType_IsValid(value))
                  {
                    set_type(static_cast< ::MumbleProto::Reject_RejectType >(value));
                  }
                else
                  {
                    mutable_unknown_fields()->AddVarint(1, value);
                  }
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_reason;
            break;
          }

          // optional string reason = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_reason:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_reason()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->reason().data(), this->reason().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "reason");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.Reject)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.Reject)
    return false;
#undef DO_
  }

  void Reject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.Reject)
    // optional .MumbleProto.Reject.RejectType type = 1;
    if (has_type())
      {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
          1, this->type(), output);
      }

    // optional string reason = 2;
    if (has_reason())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->reason().data(), this->reason().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "reason");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          2, this->reason(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.Reject)
  }

  ::google::protobuf::uint8* Reject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.Reject)
    // optional .MumbleProto.Reject.RejectType type = 1;
    if (has_type())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                   1, this->type(), target);
      }

    // optional string reason = 2;
    if (has_reason())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->reason().data(), this->reason().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "reason");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            2, this->reason(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.Reject)
    return target;
  }

  int Reject::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional .MumbleProto.Reject.RejectType type = 1;
        if (has_type())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
          }

        // optional string reason = 2;
        if (has_reason())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->reason());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void Reject::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const Reject* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const Reject*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void Reject::MergeFrom(const Reject& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_type())
          {
            set_type(from.type());
          }
        if (from.has_reason())
          {
            set_reason(from.reason());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void Reject::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void Reject::CopyFrom(const Reject& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool Reject::IsInitialized() const
  {

    return true;
  }

  void Reject::Swap(Reject* other)
  {
    if (other != this)
      {
        std::swap(type_, other->type_);
        std::swap(reason_, other->reason_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata Reject::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = Reject_descriptor_;
    metadata.reflection = Reject_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int ServerSync::kSessionFieldNumber;
  const int ServerSync::kMaxBandwidthFieldNumber;
  const int ServerSync::kWelcomeTextFieldNumber;
  const int ServerSync::kPermissionsFieldNumber;
#endif  // !_MSC_VER

  ServerSync::ServerSync()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ServerSync)
  }

  void ServerSync::InitAsDefaultInstance()
  {
  }

  ServerSync::ServerSync(const ServerSync& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ServerSync)
  }

  void ServerSync::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    session_ = 0u;
    max_bandwidth_ = 0u;
    welcome_text_ = const_cast< ::std::string*>
                    (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    permissions_ = GOOGLE_ULONGLONG(0);
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ServerSync::~ServerSync()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ServerSync)
    SharedDtor();
  }

  void ServerSync::SharedDtor()
  {
    if (welcome_text_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete welcome_text_;
      }
    if (this != default_instance_)
      {
      }
  }

  void ServerSync::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ServerSync::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ServerSync_descriptor_;
  }

  const ServerSync& ServerSync::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ServerSync* ServerSync::default_instance_ = NULL;

  ServerSync* ServerSync::New() const
  {
    return new ServerSync;
  }

  void ServerSync::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerSync*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 15)
      {
        ZR_(session_, max_bandwidth_);
        if (has_welcome_text())
          {
            if (welcome_text_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                welcome_text_->clear();
              }
          }
        permissions_ = GOOGLE_ULONGLONG(0);
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ServerSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ServerSync)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 session = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &session_)));
                set_has_session();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_max_bandwidth;
            break;
          }

          // optional uint32 max_bandwidth = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_max_bandwidth:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &max_bandwidth_)));
                set_has_max_bandwidth();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_welcome_text;
            break;
          }

          // optional string welcome_text = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_welcome_text:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_welcome_text()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->welcome_text().data(), this->welcome_text().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "welcome_text");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_permissions;
            break;
          }

          // optional uint64 permissions = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_permissions:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint64,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                       input, &permissions_)));
                set_has_permissions();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ServerSync)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ServerSync)
    return false;
#undef DO_
  }

  void ServerSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ServerSync)
    // optional uint32 session = 1;
    if (has_session())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(),
            output);
      }

    // optional uint32 max_bandwidth = 2;
    if (has_max_bandwidth())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2,
            this->max_bandwidth(), output);
      }

    // optional string welcome_text = 3;
    if (has_welcome_text())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->welcome_text().data(), this->welcome_text().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "welcome_text");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->welcome_text(), output);
      }

    // optional uint64 permissions = 4;
    if (has_permissions())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(4,
            this->permissions(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ServerSync)
  }

  ::google::protobuf::uint8* ServerSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ServerSync)
    // optional uint32 session = 1;
    if (has_session())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->session(), target);
      }

    // optional uint32 max_bandwidth = 2;
    if (has_max_bandwidth())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->max_bandwidth(), target);
      }

    // optional string welcome_text = 3;
    if (has_welcome_text())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->welcome_text().data(), this->welcome_text().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "welcome_text");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->welcome_text(), target);
      }

    // optional uint64 permissions = 4;
    if (has_permissions())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4,
                 this->permissions(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ServerSync)
    return target;
  }

  int ServerSync::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 session = 1;
        if (has_session())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->session());
          }

        // optional uint32 max_bandwidth = 2;
        if (has_max_bandwidth())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->max_bandwidth());
          }

        // optional string welcome_text = 3;
        if (has_welcome_text())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->welcome_text());
          }

        // optional uint64 permissions = 4;
        if (has_permissions())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt64Size(
                            this->permissions());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ServerSync::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ServerSync* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ServerSync*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ServerSync::MergeFrom(const ServerSync& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_session())
          {
            set_session(from.session());
          }
        if (from.has_max_bandwidth())
          {
            set_max_bandwidth(from.max_bandwidth());
          }
        if (from.has_welcome_text())
          {
            set_welcome_text(from.welcome_text());
          }
        if (from.has_permissions())
          {
            set_permissions(from.permissions());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ServerSync::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ServerSync::CopyFrom(const ServerSync& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ServerSync::IsInitialized() const
  {

    return true;
  }

  void ServerSync::Swap(ServerSync* other)
  {
    if (other != this)
      {
        std::swap(session_, other->session_);
        std::swap(max_bandwidth_, other->max_bandwidth_);
        std::swap(welcome_text_, other->welcome_text_);
        std::swap(permissions_, other->permissions_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ServerSync::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ServerSync_descriptor_;
    metadata.reflection = ServerSync_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int ChannelRemove::kChannelIdFieldNumber;
#endif  // !_MSC_VER

  ChannelRemove::ChannelRemove()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ChannelRemove)
  }

  void ChannelRemove::InitAsDefaultInstance()
  {
  }

  ChannelRemove::ChannelRemove(const ChannelRemove& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ChannelRemove)
  }

  void ChannelRemove::SharedCtor()
  {
    _cached_size_ = 0;
    channel_id_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ChannelRemove::~ChannelRemove()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ChannelRemove)
    SharedDtor();
  }

  void ChannelRemove::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void ChannelRemove::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ChannelRemove::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ChannelRemove_descriptor_;
  }

  const ChannelRemove& ChannelRemove::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ChannelRemove* ChannelRemove::default_instance_ = NULL;

  ChannelRemove* ChannelRemove::New() const
  {
    return new ChannelRemove;
  }

  void ChannelRemove::Clear()
  {
    channel_id_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ChannelRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ChannelRemove)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required uint32 channel_id = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &channel_id_)));
                set_has_channel_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ChannelRemove)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ChannelRemove)
    return false;
#undef DO_
  }

  void ChannelRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ChannelRemove)
    // required uint32 channel_id = 1;
    if (has_channel_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ChannelRemove)
  }

  ::google::protobuf::uint8* ChannelRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ChannelRemove)
    // required uint32 channel_id = 1;
    if (has_channel_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->channel_id(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ChannelRemove)
    return target;
  }

  int ChannelRemove::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required uint32 channel_id = 1;
        if (has_channel_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->channel_id());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ChannelRemove::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ChannelRemove* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ChannelRemove*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ChannelRemove::MergeFrom(const ChannelRemove& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_channel_id())
          {
            set_channel_id(from.channel_id());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ChannelRemove::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ChannelRemove::CopyFrom(const ChannelRemove& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ChannelRemove::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
  }

  void ChannelRemove::Swap(ChannelRemove* other)
  {
    if (other != this)
      {
        std::swap(channel_id_, other->channel_id_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ChannelRemove::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ChannelRemove_descriptor_;
    metadata.reflection = ChannelRemove_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int ChannelState::kChannelIdFieldNumber;
  const int ChannelState::kParentFieldNumber;
  const int ChannelState::kNameFieldNumber;
  const int ChannelState::kLinksFieldNumber;
  const int ChannelState::kDescriptionFieldNumber;
  const int ChannelState::kLinksAddFieldNumber;
  const int ChannelState::kLinksRemoveFieldNumber;
  const int ChannelState::kTemporaryFieldNumber;
  const int ChannelState::kPositionFieldNumber;
  const int ChannelState::kDescriptionHashFieldNumber;
  const int ChannelState::kMaxUsersFieldNumber;
#endif  // !_MSC_VER

  ChannelState::ChannelState()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ChannelState)
  }

  void ChannelState::InitAsDefaultInstance()
  {
  }

  ChannelState::ChannelState(const ChannelState& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ChannelState)
  }

  void ChannelState::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    channel_id_ = 0u;
    parent_ = 0u;
    name_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    description_ = const_cast< ::std::string*>
                   (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    temporary_ = false;
    position_ = 0;
    description_hash_ = const_cast< ::std::string*>
                        (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    max_users_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ChannelState::~ChannelState()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ChannelState)
    SharedDtor();
  }

  void ChannelState::SharedDtor()
  {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete name_;
      }
    if (description_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete description_;
      }
    if (description_hash_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete description_hash_;
      }
    if (this != default_instance_)
      {
      }
  }

  void ChannelState::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ChannelState::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ChannelState_descriptor_;
  }

  const ChannelState& ChannelState::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ChannelState* ChannelState::default_instance_ = NULL;

  ChannelState* ChannelState::New() const
  {
    return new ChannelState;
  }

  void ChannelState::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChannelState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 151)
      {
        ZR_(channel_id_, parent_);
        if (has_name())
          {
            if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                name_->clear();
              }
          }
        if (has_description())
          {
            if (description_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                description_->clear();
              }
          }
        temporary_ = false;
      }
    if (_has_bits_[8 / 32] & 1792)
      {
        position_ = 0;
        if (has_description_hash())
          {
            if (description_hash_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                description_hash_->clear();
              }
          }
        max_users_ = 0u;
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    links_.Clear();
    links_add_.Clear();
    links_remove_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ChannelState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ChannelState)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 channel_id = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &channel_id_)));
                set_has_channel_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_parent;
            break;
          }

          // optional uint32 parent = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_parent:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &parent_)));
                set_has_parent();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_name;
            break;
          }

          // optional string name = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->name().data(), this->name().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "name");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_links;
            break;
          }

          // repeated uint32 links = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_links:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 32, input, this->mutable_links())));
              }
            else if (tag == 34)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_links())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_links;
            if (input->ExpectTag(42)) goto parse_description;
            break;
          }

          // optional string description = 5;
          case 5:
          {
            if (tag == 42)
              {
parse_description:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_description()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->description().data(), this->description().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "description");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(48)) goto parse_links_add;
            break;
          }

          // repeated uint32 links_add = 6;
          case 6:
          {
            if (tag == 48)
              {
parse_links_add:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 48, input, this->mutable_links_add())));
              }
            else if (tag == 50)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_links_add())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(48)) goto parse_links_add;
            if (input->ExpectTag(56)) goto parse_links_remove;
            break;
          }

          // repeated uint32 links_remove = 7;
          case 7:
          {
            if (tag == 56)
              {
parse_links_remove:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 56, input, this->mutable_links_remove())));
              }
            else if (tag == 58)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_links_remove())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(56)) goto parse_links_remove;
            if (input->ExpectTag(64)) goto parse_temporary;
            break;
          }

          // optional bool temporary = 8 [default = false];
          case 8:
          {
            if (tag == 64)
              {
parse_temporary:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &temporary_)));
                set_has_temporary();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(72)) goto parse_position;
            break;
          }

          // optional int32 position = 9 [default = 0];
          case 9:
          {
            if (tag == 72)
              {
parse_position:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                       input, &position_)));
                set_has_position();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(82)) goto parse_description_hash;
            break;
          }

          // optional bytes description_hash = 10;
          case 10:
          {
            if (tag == 82)
              {
parse_description_hash:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_description_hash()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(88)) goto parse_max_users;
            break;
          }

          // optional uint32 max_users = 11;
          case 11:
          {
            if (tag == 88)
              {
parse_max_users:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &max_users_)));
                set_has_max_users();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ChannelState)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ChannelState)
    return false;
#undef DO_
  }

  void ChannelState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ChannelState)
    // optional uint32 channel_id = 1;
    if (has_channel_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(),
            output);
      }

    // optional uint32 parent = 2;
    if (has_parent())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent(),
            output);
      }

    // optional string name = 3;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->name(), output);
      }

    // repeated uint32 links = 4;
    for (int i = 0; i < this->links_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          4, this->links(i), output);
      }

    // optional string description = 5;
    if (has_description())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->description().data(), this->description().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "description");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          5, this->description(), output);
      }

    // repeated uint32 links_add = 6;
    for (int i = 0; i < this->links_add_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          6, this->links_add(i), output);
      }

    // repeated uint32 links_remove = 7;
    for (int i = 0; i < this->links_remove_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          7, this->links_remove(i), output);
      }

    // optional bool temporary = 8 [default = false];
    if (has_temporary())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->temporary(),
            output);
      }

    // optional int32 position = 9 [default = 0];
    if (has_position())
      {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->position(),
            output);
      }

    // optional bytes description_hash = 10;
    if (has_description_hash())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          10, this->description_hash(), output);
      }

    // optional uint32 max_users = 11;
    if (has_max_users())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_users(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ChannelState)
  }

  ::google::protobuf::uint8* ChannelState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ChannelState)
    // optional uint32 channel_id = 1;
    if (has_channel_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->channel_id(), target);
      }

    // optional uint32 parent = 2;
    if (has_parent())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->parent(), target);
      }

    // optional string name = 3;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->name(), target);
      }

    // repeated uint32 links = 4;
    for (int i = 0; i < this->links_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(4, this->links(i), target);
      }

    // optional string description = 5;
    if (has_description())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->description().data(), this->description().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "description");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            5, this->description(), target);
      }

    // repeated uint32 links_add = 6;
    for (int i = 0; i < this->links_add_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(6, this->links_add(i), target);
      }

    // repeated uint32 links_remove = 7;
    for (int i = 0; i < this->links_remove_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(7, this->links_remove(i), target);
      }

    // optional bool temporary = 8 [default = false];
    if (has_temporary())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8,
                 this->temporary(), target);
      }

    // optional int32 position = 9 [default = 0];
    if (has_position())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9,
                 this->position(), target);
      }

    // optional bytes description_hash = 10;
    if (has_description_hash())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            10, this->description_hash(), target);
      }

    // optional uint32 max_users = 11;
    if (has_max_users())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11,
                 this->max_users(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ChannelState)
    return target;
  }

  int ChannelState::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 channel_id = 1;
        if (has_channel_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->channel_id());
          }

        // optional uint32 parent = 2;
        if (has_parent())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->parent());
          }

        // optional string name = 3;
        if (has_name())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->name());
          }

        // optional string description = 5;
        if (has_description())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->description());
          }

        // optional bool temporary = 8 [default = false];
        if (has_temporary())
          {
            total_size += 1 + 1;
          }

      }
    if (_has_bits_[8 / 32] & (0xffu << (8 % 32)))
      {
        // optional int32 position = 9 [default = 0];
        if (has_position())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->position());
          }

        // optional bytes description_hash = 10;
        if (has_description_hash())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->description_hash());
          }

        // optional uint32 max_users = 11;
        if (has_max_users())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->max_users());
          }

      }
    // repeated uint32 links = 4;
    {
      int data_size = 0;
      for (int i = 0; i < this->links_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->links(i));
        }
      total_size += 1 * this->links_size() + data_size;
    }

    // repeated uint32 links_add = 6;
    {
      int data_size = 0;
      for (int i = 0; i < this->links_add_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->links_add(i));
        }
      total_size += 1 * this->links_add_size() + data_size;
    }

    // repeated uint32 links_remove = 7;
    {
      int data_size = 0;
      for (int i = 0; i < this->links_remove_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->links_remove(i));
        }
      total_size += 1 * this->links_remove_size() + data_size;
    }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ChannelState::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ChannelState* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ChannelState*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ChannelState::MergeFrom(const ChannelState& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    links_.MergeFrom(from.links_);
    links_add_.MergeFrom(from.links_add_);
    links_remove_.MergeFrom(from.links_remove_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_channel_id())
          {
            set_channel_id(from.channel_id());
          }
        if (from.has_parent())
          {
            set_parent(from.parent());
          }
        if (from.has_name())
          {
            set_name(from.name());
          }
        if (from.has_description())
          {
            set_description(from.description());
          }
        if (from.has_temporary())
          {
            set_temporary(from.temporary());
          }
      }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32)))
      {
        if (from.has_position())
          {
            set_position(from.position());
          }
        if (from.has_description_hash())
          {
            set_description_hash(from.description_hash());
          }
        if (from.has_max_users())
          {
            set_max_users(from.max_users());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ChannelState::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ChannelState::CopyFrom(const ChannelState& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ChannelState::IsInitialized() const
  {

    return true;
  }

  void ChannelState::Swap(ChannelState* other)
  {
    if (other != this)
      {
        std::swap(channel_id_, other->channel_id_);
        std::swap(parent_, other->parent_);
        std::swap(name_, other->name_);
        links_.Swap(&other->links_);
        std::swap(description_, other->description_);
        links_add_.Swap(&other->links_add_);
        links_remove_.Swap(&other->links_remove_);
        std::swap(temporary_, other->temporary_);
        std::swap(position_, other->position_);
        std::swap(description_hash_, other->description_hash_);
        std::swap(max_users_, other->max_users_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ChannelState::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ChannelState_descriptor_;
    metadata.reflection = ChannelState_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int UserRemove::kSessionFieldNumber;
  const int UserRemove::kActorFieldNumber;
  const int UserRemove::kReasonFieldNumber;
  const int UserRemove::kBanFieldNumber;
#endif  // !_MSC_VER

  UserRemove::UserRemove()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.UserRemove)
  }

  void UserRemove::InitAsDefaultInstance()
  {
  }

  UserRemove::UserRemove(const UserRemove& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.UserRemove)
  }

  void UserRemove::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    session_ = 0u;
    actor_ = 0u;
    reason_ = const_cast< ::std::string*>
              (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ban_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  UserRemove::~UserRemove()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.UserRemove)
    SharedDtor();
  }

  void UserRemove::SharedDtor()
  {
    if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete reason_;
      }
    if (this != default_instance_)
      {
      }
  }

  void UserRemove::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* UserRemove::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return UserRemove_descriptor_;
  }

  const UserRemove& UserRemove::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  UserRemove* UserRemove::default_instance_ = NULL;

  UserRemove* UserRemove::New() const
  {
    return new UserRemove;
  }

  void UserRemove::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserRemove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 15)
      {
        ZR_(session_, actor_);
        if (has_reason())
          {
            if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                reason_->clear();
              }
          }
        ban_ = false;
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool UserRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.UserRemove)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required uint32 session = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &session_)));
                set_has_session();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_actor;
            break;
          }

          // optional uint32 actor = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_actor:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &actor_)));
                set_has_actor();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_reason;
            break;
          }

          // optional string reason = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_reason:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_reason()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->reason().data(), this->reason().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "reason");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_ban;
            break;
          }

          // optional bool ban = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_ban:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &ban_)));
                set_has_ban();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.UserRemove)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.UserRemove)
    return false;
#undef DO_
  }

  void UserRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.UserRemove)
    // required uint32 session = 1;
    if (has_session())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(),
            output);
      }

    // optional uint32 actor = 2;
    if (has_actor())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actor(),
            output);
      }

    // optional string reason = 3;
    if (has_reason())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->reason().data(), this->reason().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "reason");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->reason(), output);
      }

    // optional bool ban = 4;
    if (has_ban())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ban(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.UserRemove)
  }

  ::google::protobuf::uint8* UserRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserRemove)
    // required uint32 session = 1;
    if (has_session())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->session(), target);
      }

    // optional uint32 actor = 2;
    if (has_actor())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->actor(), target);
      }

    // optional string reason = 3;
    if (has_reason())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->reason().data(), this->reason().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "reason");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->reason(), target);
      }

    // optional bool ban = 4;
    if (has_ban())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4,
                 this->ban(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserRemove)
    return target;
  }

  int UserRemove::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required uint32 session = 1;
        if (has_session())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->session());
          }

        // optional uint32 actor = 2;
        if (has_actor())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->actor());
          }

        // optional string reason = 3;
        if (has_reason())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->reason());
          }

        // optional bool ban = 4;
        if (has_ban())
          {
            total_size += 1 + 1;
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void UserRemove::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const UserRemove* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const UserRemove*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void UserRemove::MergeFrom(const UserRemove& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_session())
          {
            set_session(from.session());
          }
        if (from.has_actor())
          {
            set_actor(from.actor());
          }
        if (from.has_reason())
          {
            set_reason(from.reason());
          }
        if (from.has_ban())
          {
            set_ban(from.ban());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void UserRemove::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void UserRemove::CopyFrom(const UserRemove& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool UserRemove::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
  }

  void UserRemove::Swap(UserRemove* other)
  {
    if (other != this)
      {
        std::swap(session_, other->session_);
        std::swap(actor_, other->actor_);
        std::swap(reason_, other->reason_);
        std::swap(ban_, other->ban_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata UserRemove::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = UserRemove_descriptor_;
    metadata.reflection = UserRemove_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int UserState::kSessionFieldNumber;
  const int UserState::kActorFieldNumber;
  const int UserState::kNameFieldNumber;
  const int UserState::kUserIdFieldNumber;
  const int UserState::kChannelIdFieldNumber;
  const int UserState::kMuteFieldNumber;
  const int UserState::kDeafFieldNumber;
  const int UserState::kSuppressFieldNumber;
  const int UserState::kSelfMuteFieldNumber;
  const int UserState::kSelfDeafFieldNumber;
  const int UserState::kTextureFieldNumber;
  const int UserState::kPluginContextFieldNumber;
  const int UserState::kPluginIdentityFieldNumber;
  const int UserState::kCommentFieldNumber;
  const int UserState::kHashFieldNumber;
  const int UserState::kCommentHashFieldNumber;
  const int UserState::kTextureHashFieldNumber;
  const int UserState::kPrioritySpeakerFieldNumber;
  const int UserState::kRecordingFieldNumber;
#endif  // !_MSC_VER

  UserState::UserState()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.UserState)
  }

  void UserState::InitAsDefaultInstance()
  {
  }

  UserState::UserState(const UserState& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.UserState)
  }

  void UserState::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    session_ = 0u;
    actor_ = 0u;
    name_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    user_id_ = 0u;
    channel_id_ = 0u;
    mute_ = false;
    deaf_ = false;
    suppress_ = false;
    self_mute_ = false;
    self_deaf_ = false;
    texture_ = const_cast< ::std::string*>
               (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    plugin_context_ = const_cast< ::std::string*>
                      (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    plugin_identity_ = const_cast< ::std::string*>
                       (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    comment_ = const_cast< ::std::string*>
               (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    hash_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    comment_hash_ = const_cast< ::std::string*>
                    (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    texture_hash_ = const_cast< ::std::string*>
                    (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    priority_speaker_ = false;
    recording_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  UserState::~UserState()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.UserState)
    SharedDtor();
  }

  void UserState::SharedDtor()
  {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete name_;
      }
    if (texture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete texture_;
      }
    if (plugin_context_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete plugin_context_;
      }
    if (plugin_identity_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete plugin_identity_;
      }
    if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete comment_;
      }
    if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete hash_;
      }
    if (comment_hash_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete comment_hash_;
      }
    if (texture_hash_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete texture_hash_;
      }
    if (this != default_instance_)
      {
      }
  }

  void UserState::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* UserState::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return UserState_descriptor_;
  }

  const UserState& UserState::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  UserState* UserState::default_instance_ = NULL;

  UserState* UserState::New() const
  {
    return new UserState;
  }

  void UserState::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 255)
      {
        ZR_(session_, actor_);
        ZR_(user_id_, channel_id_);
        ZR_(mute_, suppress_);
        if (has_name())
          {
            if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                name_->clear();
              }
          }
      }
    if (_has_bits_[8 / 32] & 65280)
      {
        ZR_(self_mute_, self_deaf_);
        if (has_texture())
          {
            if (texture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                texture_->clear();
              }
          }
        if (has_plugin_context())
          {
            if (plugin_context_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                plugin_context_->clear();
              }
          }
        if (has_plugin_identity())
          {
            if (plugin_identity_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                plugin_identity_->clear();
              }
          }
        if (has_comment())
          {
            if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                comment_->clear();
              }
          }
        if (has_hash())
          {
            if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                hash_->clear();
              }
          }
        if (has_comment_hash())
          {
            if (comment_hash_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                comment_hash_->clear();
              }
          }
      }
    if (_has_bits_[16 / 32] & 458752)
      {
        ZR_(priority_speaker_, recording_);
        if (has_texture_hash())
          {
            if (texture_hash_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                texture_hash_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool UserState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.UserState)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              16383);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 session = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &session_)));
                set_has_session();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_actor;
            break;
          }

          // optional uint32 actor = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_actor:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &actor_)));
                set_has_actor();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_name;
            break;
          }

          // optional string name = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->name().data(), this->name().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "name");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_user_id;
            break;
          }

          // optional uint32 user_id = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_user_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &user_id_)));
                set_has_user_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(40)) goto parse_channel_id;
            break;
          }

          // optional uint32 channel_id = 5;
          case 5:
          {
            if (tag == 40)
              {
parse_channel_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &channel_id_)));
                set_has_channel_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(48)) goto parse_mute;
            break;
          }

          // optional bool mute = 6;
          case 6:
          {
            if (tag == 48)
              {
parse_mute:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &mute_)));
                set_has_mute();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(56)) goto parse_deaf;
            break;
          }

          // optional bool deaf = 7;
          case 7:
          {
            if (tag == 56)
              {
parse_deaf:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &deaf_)));
                set_has_deaf();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(64)) goto parse_suppress;
            break;
          }

          // optional bool suppress = 8;
          case 8:
          {
            if (tag == 64)
              {
parse_suppress:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &suppress_)));
                set_has_suppress();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(72)) goto parse_self_mute;
            break;
          }

          // optional bool self_mute = 9;
          case 9:
          {
            if (tag == 72)
              {
parse_self_mute:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &self_mute_)));
                set_has_self_mute();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(80)) goto parse_self_deaf;
            break;
          }

          // optional bool self_deaf = 10;
          case 10:
          {
            if (tag == 80)
              {
parse_self_deaf:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &self_deaf_)));
                set_has_self_deaf();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(90)) goto parse_texture;
            break;
          }

          // optional bytes texture = 11;
          case 11:
          {
            if (tag == 90)
              {
parse_texture:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_texture()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(98)) goto parse_plugin_context;
            break;
          }

          // optional bytes plugin_context = 12;
          case 12:
          {
            if (tag == 98)
              {
parse_plugin_context:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_plugin_context()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(106)) goto parse_plugin_identity;
            break;
          }

          // optional string plugin_identity = 13;
          case 13:
          {
            if (tag == 106)
              {
parse_plugin_identity:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_plugin_identity()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->plugin_identity().data(), this->plugin_identity().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "plugin_identity");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(114)) goto parse_comment;
            break;
          }

          // optional string comment = 14;
          case 14:
          {
            if (tag == 114)
              {
parse_comment:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_comment()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->comment().data(), this->comment().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "comment");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(122)) goto parse_hash;
            break;
          }

          // optional string hash = 15;
          case 15:
          {
            if (tag == 122)
              {
parse_hash:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_hash()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->hash().data(), this->hash().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "hash");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(130)) goto parse_comment_hash;
            break;
          }

          // optional bytes comment_hash = 16;
          case 16:
          {
            if (tag == 130)
              {
parse_comment_hash:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_comment_hash()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(138)) goto parse_texture_hash;
            break;
          }

          // optional bytes texture_hash = 17;
          case 17:
          {
            if (tag == 138)
              {
parse_texture_hash:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_texture_hash()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(144)) goto parse_priority_speaker;
            break;
          }

          // optional bool priority_speaker = 18;
          case 18:
          {
            if (tag == 144)
              {
parse_priority_speaker:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &priority_speaker_)));
                set_has_priority_speaker();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(152)) goto parse_recording;
            break;
          }

          // optional bool recording = 19;
          case 19:
          {
            if (tag == 152)
              {
parse_recording:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &recording_)));
                set_has_recording();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.UserState)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.UserState)
    return false;
#undef DO_
  }

  void UserState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.UserState)
    // optional uint32 session = 1;
    if (has_session())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(),
            output);
      }

    // optional uint32 actor = 2;
    if (has_actor())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actor(),
            output);
      }

    // optional string name = 3;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->name(), output);
      }

    // optional uint32 user_id = 4;
    if (has_user_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(),
            output);
      }

    // optional uint32 channel_id = 5;
    if (has_channel_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(),
            output);
      }

    // optional bool mute = 6;
    if (has_mute())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mute(),
            output);
      }

    // optional bool deaf = 7;
    if (has_deaf())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->deaf(),
            output);
      }

    // optional bool suppress = 8;
    if (has_suppress())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->suppress(),
            output);
      }

    // optional bool self_mute = 9;
    if (has_self_mute())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->self_mute(),
            output);
      }

    // optional bool self_deaf = 10;
    if (has_self_deaf())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->self_deaf(),
            output);
      }

    // optional bytes texture = 11;
    if (has_texture())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          11, this->texture(), output);
      }

    // optional bytes plugin_context = 12;
    if (has_plugin_context())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          12, this->plugin_context(), output);
      }

    // optional string plugin_identity = 13;
    if (has_plugin_identity())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->plugin_identity().data(), this->plugin_identity().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "plugin_identity");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          13, this->plugin_identity(), output);
      }

    // optional string comment = 14;
    if (has_comment())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->comment().data(), this->comment().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "comment");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          14, this->comment(), output);
      }

    // optional string hash = 15;
    if (has_hash())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->hash().data(), this->hash().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "hash");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          15, this->hash(), output);
      }

    // optional bytes comment_hash = 16;
    if (has_comment_hash())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          16, this->comment_hash(), output);
      }

    // optional bytes texture_hash = 17;
    if (has_texture_hash())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          17, this->texture_hash(), output);
      }

    // optional bool priority_speaker = 18;
    if (has_priority_speaker())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(18,
            this->priority_speaker(), output);
      }

    // optional bool recording = 19;
    if (has_recording())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->recording(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.UserState)
  }

  ::google::protobuf::uint8* UserState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserState)
    // optional uint32 session = 1;
    if (has_session())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->session(), target);
      }

    // optional uint32 actor = 2;
    if (has_actor())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->actor(), target);
      }

    // optional string name = 3;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->name(), target);
      }

    // optional uint32 user_id = 4;
    if (has_user_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4,
                 this->user_id(), target);
      }

    // optional uint32 channel_id = 5;
    if (has_channel_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5,
                 this->channel_id(), target);
      }

    // optional bool mute = 6;
    if (has_mute())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6,
                 this->mute(), target);
      }

    // optional bool deaf = 7;
    if (has_deaf())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7,
                 this->deaf(), target);
      }

    // optional bool suppress = 8;
    if (has_suppress())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8,
                 this->suppress(), target);
      }

    // optional bool self_mute = 9;
    if (has_self_mute())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9,
                 this->self_mute(), target);
      }

    // optional bool self_deaf = 10;
    if (has_self_deaf())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10,
                 this->self_deaf(), target);
      }

    // optional bytes texture = 11;
    if (has_texture())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            11, this->texture(), target);
      }

    // optional bytes plugin_context = 12;
    if (has_plugin_context())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            12, this->plugin_context(), target);
      }

    // optional string plugin_identity = 13;
    if (has_plugin_identity())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->plugin_identity().data(), this->plugin_identity().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "plugin_identity");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            13, this->plugin_identity(), target);
      }

    // optional string comment = 14;
    if (has_comment())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->comment().data(), this->comment().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "comment");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            14, this->comment(), target);
      }

    // optional string hash = 15;
    if (has_hash())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->hash().data(), this->hash().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "hash");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            15, this->hash(), target);
      }

    // optional bytes comment_hash = 16;
    if (has_comment_hash())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            16, this->comment_hash(), target);
      }

    // optional bytes texture_hash = 17;
    if (has_texture_hash())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            17, this->texture_hash(), target);
      }

    // optional bool priority_speaker = 18;
    if (has_priority_speaker())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18,
                 this->priority_speaker(), target);
      }

    // optional bool recording = 19;
    if (has_recording())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19,
                 this->recording(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserState)
    return target;
  }

  int UserState::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 session = 1;
        if (has_session())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->session());
          }

        // optional uint32 actor = 2;
        if (has_actor())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->actor());
          }

        // optional string name = 3;
        if (has_name())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->name());
          }

        // optional uint32 user_id = 4;
        if (has_user_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->user_id());
          }

        // optional uint32 channel_id = 5;
        if (has_channel_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->channel_id());
          }

        // optional bool mute = 6;
        if (has_mute())
          {
            total_size += 1 + 1;
          }

        // optional bool deaf = 7;
        if (has_deaf())
          {
            total_size += 1 + 1;
          }

        // optional bool suppress = 8;
        if (has_suppress())
          {
            total_size += 1 + 1;
          }

      }
    if (_has_bits_[8 / 32] & (0xffu << (8 % 32)))
      {
        // optional bool self_mute = 9;
        if (has_self_mute())
          {
            total_size += 1 + 1;
          }

        // optional bool self_deaf = 10;
        if (has_self_deaf())
          {
            total_size += 1 + 1;
          }

        // optional bytes texture = 11;
        if (has_texture())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->texture());
          }

        // optional bytes plugin_context = 12;
        if (has_plugin_context())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->plugin_context());
          }

        // optional string plugin_identity = 13;
        if (has_plugin_identity())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->plugin_identity());
          }

        // optional string comment = 14;
        if (has_comment())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->comment());
          }

        // optional string hash = 15;
        if (has_hash())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->hash());
          }

        // optional bytes comment_hash = 16;
        if (has_comment_hash())
          {
            total_size += 2 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->comment_hash());
          }

      }
    if (_has_bits_[16 / 32] & (0xffu << (16 % 32)))
      {
        // optional bytes texture_hash = 17;
        if (has_texture_hash())
          {
            total_size += 2 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->texture_hash());
          }

        // optional bool priority_speaker = 18;
        if (has_priority_speaker())
          {
            total_size += 2 + 1;
          }

        // optional bool recording = 19;
        if (has_recording())
          {
            total_size += 2 + 1;
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void UserState::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const UserState* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const UserState*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void UserState::MergeFrom(const UserState& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_session())
          {
            set_session(from.session());
          }
        if (from.has_actor())
          {
            set_actor(from.actor());
          }
        if (from.has_name())
          {
            set_name(from.name());
          }
        if (from.has_user_id())
          {
            set_user_id(from.user_id());
          }
        if (from.has_channel_id())
          {
            set_channel_id(from.channel_id());
          }
        if (from.has_mute())
          {
            set_mute(from.mute());
          }
        if (from.has_deaf())
          {
            set_deaf(from.deaf());
          }
        if (from.has_suppress())
          {
            set_suppress(from.suppress());
          }
      }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32)))
      {
        if (from.has_self_mute())
          {
            set_self_mute(from.self_mute());
          }
        if (from.has_self_deaf())
          {
            set_self_deaf(from.self_deaf());
          }
        if (from.has_texture())
          {
            set_texture(from.texture());
          }
        if (from.has_plugin_context())
          {
            set_plugin_context(from.plugin_context());
          }
        if (from.has_plugin_identity())
          {
            set_plugin_identity(from.plugin_identity());
          }
        if (from.has_comment())
          {
            set_comment(from.comment());
          }
        if (from.has_hash())
          {
            set_hash(from.hash());
          }
        if (from.has_comment_hash())
          {
            set_comment_hash(from.comment_hash());
          }
      }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32)))
      {
        if (from.has_texture_hash())
          {
            set_texture_hash(from.texture_hash());
          }
        if (from.has_priority_speaker())
          {
            set_priority_speaker(from.priority_speaker());
          }
        if (from.has_recording())
          {
            set_recording(from.recording());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void UserState::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void UserState::CopyFrom(const UserState& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool UserState::IsInitialized() const
  {

    return true;
  }

  void UserState::Swap(UserState* other)
  {
    if (other != this)
      {
        std::swap(session_, other->session_);
        std::swap(actor_, other->actor_);
        std::swap(name_, other->name_);
        std::swap(user_id_, other->user_id_);
        std::swap(channel_id_, other->channel_id_);
        std::swap(mute_, other->mute_);
        std::swap(deaf_, other->deaf_);
        std::swap(suppress_, other->suppress_);
        std::swap(self_mute_, other->self_mute_);
        std::swap(self_deaf_, other->self_deaf_);
        std::swap(texture_, other->texture_);
        std::swap(plugin_context_, other->plugin_context_);
        std::swap(plugin_identity_, other->plugin_identity_);
        std::swap(comment_, other->comment_);
        std::swap(hash_, other->hash_);
        std::swap(comment_hash_, other->comment_hash_);
        std::swap(texture_hash_, other->texture_hash_);
        std::swap(priority_speaker_, other->priority_speaker_);
        std::swap(recording_, other->recording_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata UserState::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = UserState_descriptor_;
    metadata.reflection = UserState_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int BanList_BanEntry::kAddressFieldNumber;
  const int BanList_BanEntry::kMaskFieldNumber;
  const int BanList_BanEntry::kNameFieldNumber;
  const int BanList_BanEntry::kHashFieldNumber;
  const int BanList_BanEntry::kReasonFieldNumber;
  const int BanList_BanEntry::kStartFieldNumber;
  const int BanList_BanEntry::kDurationFieldNumber;
#endif  // !_MSC_VER

  BanList_BanEntry::BanList_BanEntry()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.BanList.BanEntry)
  }

  void BanList_BanEntry::InitAsDefaultInstance()
  {
  }

  BanList_BanEntry::BanList_BanEntry(const BanList_BanEntry& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.BanList.BanEntry)
  }

  void BanList_BanEntry::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    address_ = const_cast< ::std::string*>
               (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    mask_ = 0u;
    name_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    hash_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    reason_ = const_cast< ::std::string*>
              (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    start_ = const_cast< ::std::string*>
             (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    duration_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  BanList_BanEntry::~BanList_BanEntry()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.BanList.BanEntry)
    SharedDtor();
  }

  void BanList_BanEntry::SharedDtor()
  {
    if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete address_;
      }
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete name_;
      }
    if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete hash_;
      }
    if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete reason_;
      }
    if (start_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete start_;
      }
    if (this != default_instance_)
      {
      }
  }

  void BanList_BanEntry::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* BanList_BanEntry::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return BanList_BanEntry_descriptor_;
  }

  const BanList_BanEntry& BanList_BanEntry::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  BanList_BanEntry* BanList_BanEntry::default_instance_ = NULL;

  BanList_BanEntry* BanList_BanEntry::New() const
  {
    return new BanList_BanEntry;
  }

  void BanList_BanEntry::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BanList_BanEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 127)
      {
        ZR_(mask_, duration_);
        if (has_address())
          {
            if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                address_->clear();
              }
          }
        if (has_name())
          {
            if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                name_->clear();
              }
          }
        if (has_hash())
          {
            if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                hash_->clear();
              }
          }
        if (has_reason())
          {
            if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                reason_->clear();
              }
          }
        if (has_start())
          {
            if (start_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                start_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool BanList_BanEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.BanList.BanEntry)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required bytes address = 1;
          case 1:
          {
            if (tag == 10)
              {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_address()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_mask;
            break;
          }

          // required uint32 mask = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_mask:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &mask_)));
                set_has_mask();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_name;
            break;
          }

          // optional string name = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->name().data(), this->name().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "name");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(34)) goto parse_hash;
            break;
          }

          // optional string hash = 4;
          case 4:
          {
            if (tag == 34)
              {
parse_hash:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_hash()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->hash().data(), this->hash().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "hash");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(42)) goto parse_reason;
            break;
          }

          // optional string reason = 5;
          case 5:
          {
            if (tag == 42)
              {
parse_reason:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_reason()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->reason().data(), this->reason().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "reason");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(50)) goto parse_start;
            break;
          }

          // optional string start = 6;
          case 6:
          {
            if (tag == 50)
              {
parse_start:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_start()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->start().data(), this->start().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "start");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(56)) goto parse_duration;
            break;
          }

          // optional uint32 duration = 7;
          case 7:
          {
            if (tag == 56)
              {
parse_duration:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &duration_)));
                set_has_duration();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.BanList.BanEntry)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.BanList.BanEntry)
    return false;
#undef DO_
  }

  void BanList_BanEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.BanList.BanEntry)
    // required bytes address = 1;
    if (has_address())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          1, this->address(), output);
      }

    // required uint32 mask = 2;
    if (has_mask())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mask(),
            output);
      }

    // optional string name = 3;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->name(), output);
      }

    // optional string hash = 4;
    if (has_hash())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->hash().data(), this->hash().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "hash");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          4, this->hash(), output);
      }

    // optional string reason = 5;
    if (has_reason())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->reason().data(), this->reason().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "reason");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          5, this->reason(), output);
      }

    // optional string start = 6;
    if (has_start())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->start().data(), this->start().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "start");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          6, this->start(), output);
      }

    // optional uint32 duration = 7;
    if (has_duration())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.BanList.BanEntry)
  }

  ::google::protobuf::uint8* BanList_BanEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.BanList.BanEntry)
    // required bytes address = 1;
    if (has_address())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            1, this->address(), target);
      }

    // required uint32 mask = 2;
    if (has_mask())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->mask(), target);
      }

    // optional string name = 3;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->name(), target);
      }

    // optional string hash = 4;
    if (has_hash())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->hash().data(), this->hash().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "hash");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            4, this->hash(), target);
      }

    // optional string reason = 5;
    if (has_reason())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->reason().data(), this->reason().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "reason");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            5, this->reason(), target);
      }

    // optional string start = 6;
    if (has_start())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->start().data(), this->start().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "start");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            6, this->start(), target);
      }

    // optional uint32 duration = 7;
    if (has_duration())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7,
                 this->duration(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.BanList.BanEntry)
    return target;
  }

  int BanList_BanEntry::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required bytes address = 1;
        if (has_address())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->address());
          }

        // required uint32 mask = 2;
        if (has_mask())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->mask());
          }

        // optional string name = 3;
        if (has_name())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->name());
          }

        // optional string hash = 4;
        if (has_hash())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->hash());
          }

        // optional string reason = 5;
        if (has_reason())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->reason());
          }

        // optional string start = 6;
        if (has_start())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->start());
          }

        // optional uint32 duration = 7;
        if (has_duration())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->duration());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void BanList_BanEntry::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const BanList_BanEntry* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const BanList_BanEntry*>
      (
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void BanList_BanEntry::MergeFrom(const BanList_BanEntry& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_address())
          {
            set_address(from.address());
          }
        if (from.has_mask())
          {
            set_mask(from.mask());
          }
        if (from.has_name())
          {
            set_name(from.name());
          }
        if (from.has_hash())
          {
            set_hash(from.hash());
          }
        if (from.has_reason())
          {
            set_reason(from.reason());
          }
        if (from.has_start())
          {
            set_start(from.start());
          }
        if (from.has_duration())
          {
            set_duration(from.duration());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void BanList_BanEntry::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void BanList_BanEntry::CopyFrom(const BanList_BanEntry& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool BanList_BanEntry::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

    return true;
  }

  void BanList_BanEntry::Swap(BanList_BanEntry* other)
  {
    if (other != this)
      {
        std::swap(address_, other->address_);
        std::swap(mask_, other->mask_);
        std::swap(name_, other->name_);
        std::swap(hash_, other->hash_);
        std::swap(reason_, other->reason_);
        std::swap(start_, other->start_);
        std::swap(duration_, other->duration_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata BanList_BanEntry::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = BanList_BanEntry_descriptor_;
    metadata.reflection = BanList_BanEntry_reflection_;
    return metadata;
  }


// -------------------------------------------------------------------

#ifndef _MSC_VER
  const int BanList::kBansFieldNumber;
  const int BanList::kQueryFieldNumber;
#endif  // !_MSC_VER

  BanList::BanList()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.BanList)
  }

  void BanList::InitAsDefaultInstance()
  {
  }

  BanList::BanList(const BanList& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.BanList)
  }

  void BanList::SharedCtor()
  {
    _cached_size_ = 0;
    query_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  BanList::~BanList()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.BanList)
    SharedDtor();
  }

  void BanList::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void BanList::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* BanList::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return BanList_descriptor_;
  }

  const BanList& BanList::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  BanList* BanList::default_instance_ = NULL;

  BanList* BanList::New() const
  {
    return new BanList;
  }

  void BanList::Clear()
  {
    query_ = false;
    bans_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool BanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.BanList)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // repeated .MumbleProto.BanList.BanEntry bans = 1;
          case 1:
          {
            if (tag == 10)
              {
parse_bans:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                      input, add_bans()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(10)) goto parse_bans;
            if (input->ExpectTag(16)) goto parse_query;
            break;
          }

          // optional bool query = 2 [default = false];
          case 2:
          {
            if (tag == 16)
              {
parse_query:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &query_)));
                set_has_query();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.BanList)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.BanList)
    return false;
#undef DO_
  }

  void BanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.BanList)
    // repeated .MumbleProto.BanList.BanEntry bans = 1;
    for (int i = 0; i < this->bans_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, this->bans(i), output);
      }

    // optional bool query = 2 [default = false];
    if (has_query())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->query(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.BanList)
  }

  ::google::protobuf::uint8* BanList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.BanList)
    // repeated .MumbleProto.BanList.BanEntry bans = 1;
    for (int i = 0; i < this->bans_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteMessageNoVirtualToArray(
                   1, this->bans(i), target);
      }

    // optional bool query = 2 [default = false];
    if (has_query())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2,
                 this->query(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.BanList)
    return target;
  }

  int BanList::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[1 / 32] & (0xffu << (1 % 32)))
      {
        // optional bool query = 2 [default = false];
        if (has_query())
          {
            total_size += 1 + 1;
          }

      }
    // repeated .MumbleProto.BanList.BanEntry bans = 1;
    total_size += 1 * this->bans_size();
    for (int i = 0; i < this->bans_size(); i++)
      {
        total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->bans(i));
      }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void BanList::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const BanList* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const BanList*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void BanList::MergeFrom(const BanList& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    bans_.MergeFrom(from.bans_);
    if (from._has_bits_[1 / 32] & (0xffu << (1 % 32)))
      {
        if (from.has_query())
          {
            set_query(from.query());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void BanList::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void BanList::CopyFrom(const BanList& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool BanList::IsInitialized() const
  {

    if (!::google::protobuf::internal::AllAreInitialized(this->bans())) return
        false;
    return true;
  }

  void BanList::Swap(BanList* other)
  {
    if (other != this)
      {
        bans_.Swap(&other->bans_);
        std::swap(query_, other->query_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata BanList::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = BanList_descriptor_;
    metadata.reflection = BanList_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int TextMessage::kActorFieldNumber;
  const int TextMessage::kSessionFieldNumber;
  const int TextMessage::kChannelIdFieldNumber;
  const int TextMessage::kTreeIdFieldNumber;
  const int TextMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

  TextMessage::TextMessage()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.TextMessage)
  }

  void TextMessage::InitAsDefaultInstance()
  {
  }

  TextMessage::TextMessage(const TextMessage& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.TextMessage)
  }

  void TextMessage::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    actor_ = 0u;
    message_ = const_cast< ::std::string*>
               (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  TextMessage::~TextMessage()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.TextMessage)
    SharedDtor();
  }

  void TextMessage::SharedDtor()
  {
    if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete message_;
      }
    if (this != default_instance_)
      {
      }
  }

  void TextMessage::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* TextMessage::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return TextMessage_descriptor_;
  }

  const TextMessage& TextMessage::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  TextMessage* TextMessage::default_instance_ = NULL;

  TextMessage* TextMessage::New() const
  {
    return new TextMessage;
  }

  void TextMessage::Clear()
  {
    if (_has_bits_[0 / 32] & 17)
      {
        actor_ = 0u;
        if (has_message())
          {
            if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                message_->clear();
              }
          }
      }
    session_.Clear();
    channel_id_.Clear();
    tree_id_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.TextMessage)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 actor = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &actor_)));
                set_has_actor();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_session;
            break;
          }

          // repeated uint32 session = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_session:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 16, input, this->mutable_session())));
              }
            else if (tag == 18)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_session())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_session;
            if (input->ExpectTag(24)) goto parse_channel_id;
            break;
          }

          // repeated uint32 channel_id = 3;
          case 3:
          {
            if (tag == 24)
              {
parse_channel_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 24, input, this->mutable_channel_id())));
              }
            else if (tag == 26)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_channel_id())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_channel_id;
            if (input->ExpectTag(32)) goto parse_tree_id;
            break;
          }

          // repeated uint32 tree_id = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_tree_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 32, input, this->mutable_tree_id())));
              }
            else if (tag == 34)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_tree_id())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_tree_id;
            if (input->ExpectTag(42)) goto parse_message;
            break;
          }

          // required string message = 5;
          case 5:
          {
            if (tag == 42)
              {
parse_message:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_message()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->message().data(), this->message().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "message");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.TextMessage)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.TextMessage)
    return false;
#undef DO_
  }

  void TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.TextMessage)
    // optional uint32 actor = 1;
    if (has_actor())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actor(),
            output);
      }

    // repeated uint32 session = 2;
    for (int i = 0; i < this->session_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          2, this->session(i), output);
      }

    // repeated uint32 channel_id = 3;
    for (int i = 0; i < this->channel_id_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          3, this->channel_id(i), output);
      }

    // repeated uint32 tree_id = 4;
    for (int i = 0; i < this->tree_id_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          4, this->tree_id(i), output);
      }

    // required string message = 5;
    if (has_message())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->message().data(), this->message().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "message");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          5, this->message(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.TextMessage)
  }

  ::google::protobuf::uint8* TextMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.TextMessage)
    // optional uint32 actor = 1;
    if (has_actor())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->actor(), target);
      }

    // repeated uint32 session = 2;
    for (int i = 0; i < this->session_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(2, this->session(i), target);
      }

    // repeated uint32 channel_id = 3;
    for (int i = 0; i < this->channel_id_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(3, this->channel_id(i), target);
      }

    // repeated uint32 tree_id = 4;
    for (int i = 0; i < this->tree_id_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(4, this->tree_id(i), target);
      }

    // required string message = 5;
    if (has_message())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->message().data(), this->message().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "message");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            5, this->message(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.TextMessage)
    return target;
  }

  int TextMessage::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 actor = 1;
        if (has_actor())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->actor());
          }

        // required string message = 5;
        if (has_message())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->message());
          }

      }
    // repeated uint32 session = 2;
    {
      int data_size = 0;
      for (int i = 0; i < this->session_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->session(i));
        }
      total_size += 1 * this->session_size() + data_size;
    }

    // repeated uint32 channel_id = 3;
    {
      int data_size = 0;
      for (int i = 0; i < this->channel_id_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->channel_id(i));
        }
      total_size += 1 * this->channel_id_size() + data_size;
    }

    // repeated uint32 tree_id = 4;
    {
      int data_size = 0;
      for (int i = 0; i < this->tree_id_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->tree_id(i));
        }
      total_size += 1 * this->tree_id_size() + data_size;
    }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void TextMessage::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const TextMessage* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const TextMessage*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void TextMessage::MergeFrom(const TextMessage& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    session_.MergeFrom(from.session_);
    channel_id_.MergeFrom(from.channel_id_);
    tree_id_.MergeFrom(from.tree_id_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_actor())
          {
            set_actor(from.actor());
          }
        if (from.has_message())
          {
            set_message(from.message());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void TextMessage::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void TextMessage::CopyFrom(const TextMessage& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool TextMessage::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

    return true;
  }

  void TextMessage::Swap(TextMessage* other)
  {
    if (other != this)
      {
        std::swap(actor_, other->actor_);
        session_.Swap(&other->session_);
        channel_id_.Swap(&other->channel_id_);
        tree_id_.Swap(&other->tree_id_);
        std::swap(message_, other->message_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata TextMessage::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = TextMessage_descriptor_;
    metadata.reflection = TextMessage_reflection_;
    return metadata;
  }


// ===================================================================

  const ::google::protobuf::EnumDescriptor*
  PermissionDenied_DenyType_descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return PermissionDenied_DenyType_descriptor_;
  }
  bool PermissionDenied_DenyType_IsValid(int value)
  {
    switch(value)
      {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        return true;
      default:
        return false;
      }
  }

#ifndef _MSC_VER
  const PermissionDenied_DenyType PermissionDenied::Text;
  const PermissionDenied_DenyType PermissionDenied::Permission;
  const PermissionDenied_DenyType PermissionDenied::SuperUser;
  const PermissionDenied_DenyType PermissionDenied::ChannelName;
  const PermissionDenied_DenyType PermissionDenied::TextTooLong;
  const PermissionDenied_DenyType PermissionDenied::H9K;
  const PermissionDenied_DenyType PermissionDenied::TemporaryChannel;
  const PermissionDenied_DenyType PermissionDenied::MissingCertificate;
  const PermissionDenied_DenyType PermissionDenied::UserName;
  const PermissionDenied_DenyType PermissionDenied::ChannelFull;
  const PermissionDenied_DenyType PermissionDenied::NestingLimit;
  const PermissionDenied_DenyType PermissionDenied::DenyType_MIN;
  const PermissionDenied_DenyType PermissionDenied::DenyType_MAX;
  const int PermissionDenied::DenyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
  const int PermissionDenied::kPermissionFieldNumber;
  const int PermissionDenied::kChannelIdFieldNumber;
  const int PermissionDenied::kSessionFieldNumber;
  const int PermissionDenied::kReasonFieldNumber;
  const int PermissionDenied::kTypeFieldNumber;
  const int PermissionDenied::kNameFieldNumber;
#endif  // !_MSC_VER

  PermissionDenied::PermissionDenied()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.PermissionDenied)
  }

  void PermissionDenied::InitAsDefaultInstance()
  {
  }

  PermissionDenied::PermissionDenied(const PermissionDenied& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.PermissionDenied)
  }

  void PermissionDenied::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    permission_ = 0u;
    channel_id_ = 0u;
    session_ = 0u;
    reason_ = const_cast< ::std::string*>
              (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    type_ = 0;
    name_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  PermissionDenied::~PermissionDenied()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.PermissionDenied)
    SharedDtor();
  }

  void PermissionDenied::SharedDtor()
  {
    if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete reason_;
      }
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete name_;
      }
    if (this != default_instance_)
      {
      }
  }

  void PermissionDenied::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* PermissionDenied::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return PermissionDenied_descriptor_;
  }

  const PermissionDenied& PermissionDenied::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  PermissionDenied* PermissionDenied::default_instance_ = NULL;

  PermissionDenied* PermissionDenied::New() const
  {
    return new PermissionDenied;
  }

  void PermissionDenied::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PermissionDenied*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 63)
      {
        ZR_(permission_, channel_id_);
        ZR_(session_, type_);
        if (has_reason())
          {
            if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                reason_->clear();
              }
          }
        if (has_name())
          {
            if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                name_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool PermissionDenied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.PermissionDenied)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 permission = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &permission_)));
                set_has_permission();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_channel_id;
            break;
          }

          // optional uint32 channel_id = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_channel_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &channel_id_)));
                set_has_channel_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_session;
            break;
          }

          // optional uint32 session = 3;
          case 3:
          {
            if (tag == 24)
              {
parse_session:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &session_)));
                set_has_session();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(34)) goto parse_reason;
            break;
          }

          // optional string reason = 4;
          case 4:
          {
            if (tag == 34)
              {
parse_reason:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_reason()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->reason().data(), this->reason().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "reason");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(40)) goto parse_type;
            break;
          }

          // optional .MumbleProto.PermissionDenied.DenyType type = 5;
          case 5:
          {
            if (tag == 40)
              {
parse_type:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                       input, &value)));
                if (::MumbleProto::PermissionDenied_DenyType_IsValid(value))
                  {
                    set_type(static_cast< ::MumbleProto::PermissionDenied_DenyType >(value));
                  }
                else
                  {
                    mutable_unknown_fields()->AddVarint(5, value);
                  }
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(50)) goto parse_name;
            break;
          }

          // optional string name = 6;
          case 6:
          {
            if (tag == 50)
              {
parse_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->name().data(), this->name().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "name");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.PermissionDenied)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.PermissionDenied)
    return false;
#undef DO_
  }

  void PermissionDenied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.PermissionDenied)
    // optional uint32 permission = 1;
    if (has_permission())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->permission(),
            output);
      }

    // optional uint32 channel_id = 2;
    if (has_channel_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(),
            output);
      }

    // optional uint32 session = 3;
    if (has_session())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session(),
            output);
      }

    // optional string reason = 4;
    if (has_reason())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->reason().data(), this->reason().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "reason");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          4, this->reason(), output);
      }

    // optional .MumbleProto.PermissionDenied.DenyType type = 5;
    if (has_type())
      {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
          5, this->type(), output);
      }

    // optional string name = 6;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          6, this->name(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.PermissionDenied)
  }

  ::google::protobuf::uint8* PermissionDenied::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.PermissionDenied)
    // optional uint32 permission = 1;
    if (has_permission())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->permission(), target);
      }

    // optional uint32 channel_id = 2;
    if (has_channel_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->channel_id(), target);
      }

    // optional uint32 session = 3;
    if (has_session())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3,
                 this->session(), target);
      }

    // optional string reason = 4;
    if (has_reason())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->reason().data(), this->reason().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "reason");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            4, this->reason(), target);
      }

    // optional .MumbleProto.PermissionDenied.DenyType type = 5;
    if (has_type())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                   5, this->type(), target);
      }

    // optional string name = 6;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            6, this->name(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.PermissionDenied)
    return target;
  }

  int PermissionDenied::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 permission = 1;
        if (has_permission())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->permission());
          }

        // optional uint32 channel_id = 2;
        if (has_channel_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->channel_id());
          }

        // optional uint32 session = 3;
        if (has_session())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->session());
          }

        // optional string reason = 4;
        if (has_reason())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->reason());
          }

        // optional .MumbleProto.PermissionDenied.DenyType type = 5;
        if (has_type())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
          }

        // optional string name = 6;
        if (has_name())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->name());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void PermissionDenied::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const PermissionDenied* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const PermissionDenied*>
      (
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void PermissionDenied::MergeFrom(const PermissionDenied& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_permission())
          {
            set_permission(from.permission());
          }
        if (from.has_channel_id())
          {
            set_channel_id(from.channel_id());
          }
        if (from.has_session())
          {
            set_session(from.session());
          }
        if (from.has_reason())
          {
            set_reason(from.reason());
          }
        if (from.has_type())
          {
            set_type(from.type());
          }
        if (from.has_name())
          {
            set_name(from.name());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void PermissionDenied::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void PermissionDenied::CopyFrom(const PermissionDenied& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool PermissionDenied::IsInitialized() const
  {

    return true;
  }

  void PermissionDenied::Swap(PermissionDenied* other)
  {
    if (other != this)
      {
        std::swap(permission_, other->permission_);
        std::swap(channel_id_, other->channel_id_);
        std::swap(session_, other->session_);
        std::swap(reason_, other->reason_);
        std::swap(type_, other->type_);
        std::swap(name_, other->name_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata PermissionDenied::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = PermissionDenied_descriptor_;
    metadata.reflection = PermissionDenied_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int ACL_ChanGroup::kNameFieldNumber;
  const int ACL_ChanGroup::kInheritedFieldNumber;
  const int ACL_ChanGroup::kInheritFieldNumber;
  const int ACL_ChanGroup::kInheritableFieldNumber;
  const int ACL_ChanGroup::kAddFieldNumber;
  const int ACL_ChanGroup::kRemoveFieldNumber;
  const int ACL_ChanGroup::kInheritedMembersFieldNumber;
#endif  // !_MSC_VER

  ACL_ChanGroup::ACL_ChanGroup()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ACL.ChanGroup)
  }

  void ACL_ChanGroup::InitAsDefaultInstance()
  {
  }

  ACL_ChanGroup::ACL_ChanGroup(const ACL_ChanGroup& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL.ChanGroup)
  }

  void ACL_ChanGroup::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    name_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    inherited_ = true;
    inherit_ = true;
    inheritable_ = true;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ACL_ChanGroup::~ACL_ChanGroup()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ACL.ChanGroup)
    SharedDtor();
  }

  void ACL_ChanGroup::SharedDtor()
  {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete name_;
      }
    if (this != default_instance_)
      {
      }
  }

  void ACL_ChanGroup::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ACL_ChanGroup::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ACL_ChanGroup_descriptor_;
  }

  const ACL_ChanGroup& ACL_ChanGroup::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ACL_ChanGroup* ACL_ChanGroup::default_instance_ = NULL;

  ACL_ChanGroup* ACL_ChanGroup::New() const
  {
    return new ACL_ChanGroup;
  }

  void ACL_ChanGroup::Clear()
  {
    if (_has_bits_[0 / 32] & 15)
      {
        if (has_name())
          {
            if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                name_->clear();
              }
          }
        inherited_ = true;
        inherit_ = true;
        inheritable_ = true;
      }
    add_.Clear();
    remove_.Clear();
    inherited_members_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ACL_ChanGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ACL.ChanGroup)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required string name = 1;
          case 1:
          {
            if (tag == 10)
              {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->name().data(), this->name().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "name");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_inherited;
            break;
          }

          // optional bool inherited = 2 [default = true];
          case 2:
          {
            if (tag == 16)
              {
parse_inherited:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &inherited_)));
                set_has_inherited();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_inherit;
            break;
          }

          // optional bool inherit = 3 [default = true];
          case 3:
          {
            if (tag == 24)
              {
parse_inherit:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &inherit_)));
                set_has_inherit();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_inheritable;
            break;
          }

          // optional bool inheritable = 4 [default = true];
          case 4:
          {
            if (tag == 32)
              {
parse_inheritable:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &inheritable_)));
                set_has_inheritable();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(40)) goto parse_add;
            break;
          }

          // repeated uint32 add = 5;
          case 5:
          {
            if (tag == 40)
              {
parse_add:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 40, input, this->mutable_add())));
              }
            else if (tag == 42)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_add())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(40)) goto parse_add;
            if (input->ExpectTag(48)) goto parse_remove;
            break;
          }

          // repeated uint32 remove = 6;
          case 6:
          {
            if (tag == 48)
              {
parse_remove:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 48, input, this->mutable_remove())));
              }
            else if (tag == 50)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_remove())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(48)) goto parse_remove;
            if (input->ExpectTag(56)) goto parse_inherited_members;
            break;
          }

          // repeated uint32 inherited_members = 7;
          case 7:
          {
            if (tag == 56)
              {
parse_inherited_members:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 56, input, this->mutable_inherited_members())));
              }
            else if (tag == 58)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_inherited_members())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(56)) goto parse_inherited_members;
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ACL.ChanGroup)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ACL.ChanGroup)
    return false;
#undef DO_
  }

  void ACL_ChanGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ACL.ChanGroup)
    // required string name = 1;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          1, this->name(), output);
      }

    // optional bool inherited = 2 [default = true];
    if (has_inherited())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inherited(),
            output);
      }

    // optional bool inherit = 3 [default = true];
    if (has_inherit())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inherit(),
            output);
      }

    // optional bool inheritable = 4 [default = true];
    if (has_inheritable())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->inheritable(),
            output);
      }

    // repeated uint32 add = 5;
    for (int i = 0; i < this->add_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          5, this->add(i), output);
      }

    // repeated uint32 remove = 6;
    for (int i = 0; i < this->remove_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          6, this->remove(i), output);
      }

    // repeated uint32 inherited_members = 7;
    for (int i = 0; i < this->inherited_members_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          7, this->inherited_members(i), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ACL.ChanGroup)
  }

  ::google::protobuf::uint8* ACL_ChanGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL.ChanGroup)
    // required string name = 1;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            1, this->name(), target);
      }

    // optional bool inherited = 2 [default = true];
    if (has_inherited())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2,
                 this->inherited(), target);
      }

    // optional bool inherit = 3 [default = true];
    if (has_inherit())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3,
                 this->inherit(), target);
      }

    // optional bool inheritable = 4 [default = true];
    if (has_inheritable())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4,
                 this->inheritable(), target);
      }

    // repeated uint32 add = 5;
    for (int i = 0; i < this->add_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(5, this->add(i), target);
      }

    // repeated uint32 remove = 6;
    for (int i = 0; i < this->remove_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(6, this->remove(i), target);
      }

    // repeated uint32 inherited_members = 7;
    for (int i = 0; i < this->inherited_members_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(7, this->inherited_members(i), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL.ChanGroup)
    return target;
  }

  int ACL_ChanGroup::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required string name = 1;
        if (has_name())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->name());
          }

        // optional bool inherited = 2 [default = true];
        if (has_inherited())
          {
            total_size += 1 + 1;
          }

        // optional bool inherit = 3 [default = true];
        if (has_inherit())
          {
            total_size += 1 + 1;
          }

        // optional bool inheritable = 4 [default = true];
        if (has_inheritable())
          {
            total_size += 1 + 1;
          }

      }
    // repeated uint32 add = 5;
    {
      int data_size = 0;
      for (int i = 0; i < this->add_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->add(i));
        }
      total_size += 1 * this->add_size() + data_size;
    }

    // repeated uint32 remove = 6;
    {
      int data_size = 0;
      for (int i = 0; i < this->remove_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->remove(i));
        }
      total_size += 1 * this->remove_size() + data_size;
    }

    // repeated uint32 inherited_members = 7;
    {
      int data_size = 0;
      for (int i = 0; i < this->inherited_members_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->inherited_members(i));
        }
      total_size += 1 * this->inherited_members_size() + data_size;
    }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ACL_ChanGroup::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ACL_ChanGroup* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ACL_ChanGroup*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ACL_ChanGroup::MergeFrom(const ACL_ChanGroup& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    add_.MergeFrom(from.add_);
    remove_.MergeFrom(from.remove_);
    inherited_members_.MergeFrom(from.inherited_members_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_name())
          {
            set_name(from.name());
          }
        if (from.has_inherited())
          {
            set_inherited(from.inherited());
          }
        if (from.has_inherit())
          {
            set_inherit(from.inherit());
          }
        if (from.has_inheritable())
          {
            set_inheritable(from.inheritable());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ACL_ChanGroup::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ACL_ChanGroup::CopyFrom(const ACL_ChanGroup& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ACL_ChanGroup::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
  }

  void ACL_ChanGroup::Swap(ACL_ChanGroup* other)
  {
    if (other != this)
      {
        std::swap(name_, other->name_);
        std::swap(inherited_, other->inherited_);
        std::swap(inherit_, other->inherit_);
        std::swap(inheritable_, other->inheritable_);
        add_.Swap(&other->add_);
        remove_.Swap(&other->remove_);
        inherited_members_.Swap(&other->inherited_members_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ACL_ChanGroup::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ACL_ChanGroup_descriptor_;
    metadata.reflection = ACL_ChanGroup_reflection_;
    return metadata;
  }


// -------------------------------------------------------------------

#ifndef _MSC_VER
  const int ACL_ChanACL::kApplyHereFieldNumber;
  const int ACL_ChanACL::kApplySubsFieldNumber;
  const int ACL_ChanACL::kInheritedFieldNumber;
  const int ACL_ChanACL::kUserIdFieldNumber;
  const int ACL_ChanACL::kGroupFieldNumber;
  const int ACL_ChanACL::kGrantFieldNumber;
  const int ACL_ChanACL::kDenyFieldNumber;
#endif  // !_MSC_VER

  ACL_ChanACL::ACL_ChanACL()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ACL.ChanACL)
  }

  void ACL_ChanACL::InitAsDefaultInstance()
  {
  }

  ACL_ChanACL::ACL_ChanACL(const ACL_ChanACL& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL.ChanACL)
  }

  void ACL_ChanACL::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    apply_here_ = true;
    apply_subs_ = true;
    inherited_ = true;
    user_id_ = 0u;
    group_ = const_cast< ::std::string*>
             (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    grant_ = 0u;
    deny_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ACL_ChanACL::~ACL_ChanACL()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ACL.ChanACL)
    SharedDtor();
  }

  void ACL_ChanACL::SharedDtor()
  {
    if (group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete group_;
      }
    if (this != default_instance_)
      {
      }
  }

  void ACL_ChanACL::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ACL_ChanACL::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ACL_ChanACL_descriptor_;
  }

  const ACL_ChanACL& ACL_ChanACL::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ACL_ChanACL* ACL_ChanACL::default_instance_ = NULL;

  ACL_ChanACL* ACL_ChanACL::New() const
  {
    return new ACL_ChanACL;
  }

  void ACL_ChanACL::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ACL_ChanACL*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 127)
      {
        ZR_(grant_, deny_);
        apply_here_ = true;
        apply_subs_ = true;
        inherited_ = true;
        user_id_ = 0u;
        if (has_group())
          {
            if (group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                group_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ACL_ChanACL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ACL.ChanACL)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional bool apply_here = 1 [default = true];
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &apply_here_)));
                set_has_apply_here();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_apply_subs;
            break;
          }

          // optional bool apply_subs = 2 [default = true];
          case 2:
          {
            if (tag == 16)
              {
parse_apply_subs:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &apply_subs_)));
                set_has_apply_subs();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_inherited;
            break;
          }

          // optional bool inherited = 3 [default = true];
          case 3:
          {
            if (tag == 24)
              {
parse_inherited:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &inherited_)));
                set_has_inherited();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_user_id;
            break;
          }

          // optional uint32 user_id = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_user_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &user_id_)));
                set_has_user_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(42)) goto parse_group;
            break;
          }

          // optional string group = 5;
          case 5:
          {
            if (tag == 42)
              {
parse_group:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_group()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->group().data(), this->group().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "group");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(48)) goto parse_grant;
            break;
          }

          // optional uint32 grant = 6;
          case 6:
          {
            if (tag == 48)
              {
parse_grant:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &grant_)));
                set_has_grant();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(56)) goto parse_deny;
            break;
          }

          // optional uint32 deny = 7;
          case 7:
          {
            if (tag == 56)
              {
parse_deny:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &deny_)));
                set_has_deny();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ACL.ChanACL)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ACL.ChanACL)
    return false;
#undef DO_
  }

  void ACL_ChanACL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ACL.ChanACL)
    // optional bool apply_here = 1 [default = true];
    if (has_apply_here())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->apply_here(),
            output);
      }

    // optional bool apply_subs = 2 [default = true];
    if (has_apply_subs())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->apply_subs(),
            output);
      }

    // optional bool inherited = 3 [default = true];
    if (has_inherited())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inherited(),
            output);
      }

    // optional uint32 user_id = 4;
    if (has_user_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_id(),
            output);
      }

    // optional string group = 5;
    if (has_group())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->group().data(), this->group().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "group");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          5, this->group(), output);
      }

    // optional uint32 grant = 6;
    if (has_grant())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grant(),
            output);
      }

    // optional uint32 deny = 7;
    if (has_deny())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deny(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ACL.ChanACL)
  }

  ::google::protobuf::uint8* ACL_ChanACL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL.ChanACL)
    // optional bool apply_here = 1 [default = true];
    if (has_apply_here())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1,
                 this->apply_here(), target);
      }

    // optional bool apply_subs = 2 [default = true];
    if (has_apply_subs())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2,
                 this->apply_subs(), target);
      }

    // optional bool inherited = 3 [default = true];
    if (has_inherited())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3,
                 this->inherited(), target);
      }

    // optional uint32 user_id = 4;
    if (has_user_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4,
                 this->user_id(), target);
      }

    // optional string group = 5;
    if (has_group())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->group().data(), this->group().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "group");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            5, this->group(), target);
      }

    // optional uint32 grant = 6;
    if (has_grant())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6,
                 this->grant(), target);
      }

    // optional uint32 deny = 7;
    if (has_deny())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7,
                 this->deny(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL.ChanACL)
    return target;
  }

  int ACL_ChanACL::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional bool apply_here = 1 [default = true];
        if (has_apply_here())
          {
            total_size += 1 + 1;
          }

        // optional bool apply_subs = 2 [default = true];
        if (has_apply_subs())
          {
            total_size += 1 + 1;
          }

        // optional bool inherited = 3 [default = true];
        if (has_inherited())
          {
            total_size += 1 + 1;
          }

        // optional uint32 user_id = 4;
        if (has_user_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->user_id());
          }

        // optional string group = 5;
        if (has_group())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->group());
          }

        // optional uint32 grant = 6;
        if (has_grant())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->grant());
          }

        // optional uint32 deny = 7;
        if (has_deny())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->deny());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ACL_ChanACL::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ACL_ChanACL* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ACL_ChanACL*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ACL_ChanACL::MergeFrom(const ACL_ChanACL& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_apply_here())
          {
            set_apply_here(from.apply_here());
          }
        if (from.has_apply_subs())
          {
            set_apply_subs(from.apply_subs());
          }
        if (from.has_inherited())
          {
            set_inherited(from.inherited());
          }
        if (from.has_user_id())
          {
            set_user_id(from.user_id());
          }
        if (from.has_group())
          {
            set_group(from.group());
          }
        if (from.has_grant())
          {
            set_grant(from.grant());
          }
        if (from.has_deny())
          {
            set_deny(from.deny());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ACL_ChanACL::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ACL_ChanACL::CopyFrom(const ACL_ChanACL& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ACL_ChanACL::IsInitialized() const
  {

    return true;
  }

  void ACL_ChanACL::Swap(ACL_ChanACL* other)
  {
    if (other != this)
      {
        std::swap(apply_here_, other->apply_here_);
        std::swap(apply_subs_, other->apply_subs_);
        std::swap(inherited_, other->inherited_);
        std::swap(user_id_, other->user_id_);
        std::swap(group_, other->group_);
        std::swap(grant_, other->grant_);
        std::swap(deny_, other->deny_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ACL_ChanACL::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ACL_ChanACL_descriptor_;
    metadata.reflection = ACL_ChanACL_reflection_;
    return metadata;
  }


// -------------------------------------------------------------------

#ifndef _MSC_VER
  const int ACL::kChannelIdFieldNumber;
  const int ACL::kInheritAclsFieldNumber;
  const int ACL::kGroupsFieldNumber;
  const int ACL::kAclsFieldNumber;
  const int ACL::kQueryFieldNumber;
#endif  // !_MSC_VER

  ACL::ACL()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ACL)
  }

  void ACL::InitAsDefaultInstance()
  {
  }

  ACL::ACL(const ACL& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ACL)
  }

  void ACL::SharedCtor()
  {
    _cached_size_ = 0;
    channel_id_ = 0u;
    inherit_acls_ = true;
    query_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ACL::~ACL()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ACL)
    SharedDtor();
  }

  void ACL::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void ACL::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ACL::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ACL_descriptor_;
  }

  const ACL& ACL::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ACL* ACL::default_instance_ = NULL;

  ACL* ACL::New() const
  {
    return new ACL;
  }

  void ACL::Clear()
  {
    if (_has_bits_[0 / 32] & 19)
      {
        channel_id_ = 0u;
        inherit_acls_ = true;
        query_ = false;
      }
    groups_.Clear();
    acls_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ACL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ACL)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required uint32 channel_id = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &channel_id_)));
                set_has_channel_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_inherit_acls;
            break;
          }

          // optional bool inherit_acls = 2 [default = true];
          case 2:
          {
            if (tag == 16)
              {
parse_inherit_acls:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &inherit_acls_)));
                set_has_inherit_acls();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_groups;
            break;
          }

          // repeated .MumbleProto.ACL.ChanGroup groups = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_groups:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                      input, add_groups()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_groups;
            if (input->ExpectTag(34)) goto parse_acls;
            break;
          }

          // repeated .MumbleProto.ACL.ChanACL acls = 4;
          case 4:
          {
            if (tag == 34)
              {
parse_acls:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                      input, add_acls()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(34)) goto parse_acls;
            if (input->ExpectTag(40)) goto parse_query;
            break;
          }

          // optional bool query = 5 [default = false];
          case 5:
          {
            if (tag == 40)
              {
parse_query:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &query_)));
                set_has_query();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ACL)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ACL)
    return false;
#undef DO_
  }

  void ACL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ACL)
    // required uint32 channel_id = 1;
    if (has_channel_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(),
            output);
      }

    // optional bool inherit_acls = 2 [default = true];
    if (has_inherit_acls())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inherit_acls(),
            output);
      }

    // repeated .MumbleProto.ACL.ChanGroup groups = 3;
    for (int i = 0; i < this->groups_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          3, this->groups(i), output);
      }

    // repeated .MumbleProto.ACL.ChanACL acls = 4;
    for (int i = 0; i < this->acls_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          4, this->acls(i), output);
      }

    // optional bool query = 5 [default = false];
    if (has_query())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->query(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ACL)
  }

  ::google::protobuf::uint8* ACL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ACL)
    // required uint32 channel_id = 1;
    if (has_channel_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->channel_id(), target);
      }

    // optional bool inherit_acls = 2 [default = true];
    if (has_inherit_acls())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2,
                 this->inherit_acls(), target);
      }

    // repeated .MumbleProto.ACL.ChanGroup groups = 3;
    for (int i = 0; i < this->groups_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteMessageNoVirtualToArray(
                   3, this->groups(i), target);
      }

    // repeated .MumbleProto.ACL.ChanACL acls = 4;
    for (int i = 0; i < this->acls_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteMessageNoVirtualToArray(
                   4, this->acls(i), target);
      }

    // optional bool query = 5 [default = false];
    if (has_query())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5,
                 this->query(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ACL)
    return target;
  }

  int ACL::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required uint32 channel_id = 1;
        if (has_channel_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->channel_id());
          }

        // optional bool inherit_acls = 2 [default = true];
        if (has_inherit_acls())
          {
            total_size += 1 + 1;
          }

        // optional bool query = 5 [default = false];
        if (has_query())
          {
            total_size += 1 + 1;
          }

      }
    // repeated .MumbleProto.ACL.ChanGroup groups = 3;
    total_size += 1 * this->groups_size();
    for (int i = 0; i < this->groups_size(); i++)
      {
        total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->groups(i));
      }

    // repeated .MumbleProto.ACL.ChanACL acls = 4;
    total_size += 1 * this->acls_size();
    for (int i = 0; i < this->acls_size(); i++)
      {
        total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->acls(i));
      }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ACL::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ACL* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ACL*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ACL::MergeFrom(const ACL& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    groups_.MergeFrom(from.groups_);
    acls_.MergeFrom(from.acls_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_channel_id())
          {
            set_channel_id(from.channel_id());
          }
        if (from.has_inherit_acls())
          {
            set_inherit_acls(from.inherit_acls());
          }
        if (from.has_query())
          {
            set_query(from.query());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ACL::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ACL::CopyFrom(const ACL& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ACL::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    if (!::google::protobuf::internal::AllAreInitialized(this->groups())) return
        false;
    return true;
  }

  void ACL::Swap(ACL* other)
  {
    if (other != this)
      {
        std::swap(channel_id_, other->channel_id_);
        std::swap(inherit_acls_, other->inherit_acls_);
        groups_.Swap(&other->groups_);
        acls_.Swap(&other->acls_);
        std::swap(query_, other->query_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ACL::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ACL_descriptor_;
    metadata.reflection = ACL_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int QueryUsers::kIdsFieldNumber;
  const int QueryUsers::kNamesFieldNumber;
#endif  // !_MSC_VER

  QueryUsers::QueryUsers()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.QueryUsers)
  }

  void QueryUsers::InitAsDefaultInstance()
  {
  }

  QueryUsers::QueryUsers(const QueryUsers& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.QueryUsers)
  }

  void QueryUsers::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  QueryUsers::~QueryUsers()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.QueryUsers)
    SharedDtor();
  }

  void QueryUsers::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void QueryUsers::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* QueryUsers::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return QueryUsers_descriptor_;
  }

  const QueryUsers& QueryUsers::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  QueryUsers* QueryUsers::default_instance_ = NULL;

  QueryUsers* QueryUsers::New() const
  {
    return new QueryUsers;
  }

  void QueryUsers::Clear()
  {
    ids_.Clear();
    names_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool QueryUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.QueryUsers)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // repeated uint32 ids = 1;
          case 1:
          {
            if (tag == 8)
              {
parse_ids:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 8, input, this->mutable_ids())));
              }
            else if (tag == 10)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_ids())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(8)) goto parse_ids;
            if (input->ExpectTag(18)) goto parse_names;
            break;
          }

          // repeated string names = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_names:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->add_names()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->names(this->names_size() - 1).data(),
                  this->names(this->names_size() - 1).length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "names");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_names;
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.QueryUsers)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.QueryUsers)
    return false;
#undef DO_
  }

  void QueryUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.QueryUsers)
    // repeated uint32 ids = 1;
    for (int i = 0; i < this->ids_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          1, this->ids(i), output);
      }

    // repeated string names = 2;
    for (int i = 0; i < this->names_size(); i++)
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->names(i).data(), this->names(i).length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "names");
        ::google::protobuf::internal::WireFormatLite::WriteString(
          2, this->names(i), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.QueryUsers)
  }

  ::google::protobuf::uint8* QueryUsers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.QueryUsers)
    // repeated uint32 ids = 1;
    for (int i = 0; i < this->ids_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(1, this->ids(i), target);
      }

    // repeated string names = 2;
    for (int i = 0; i < this->names_size(); i++)
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->names(i).data(), this->names(i).length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "names");
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteStringToArray(2, this->names(i), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.QueryUsers)
    return target;
  }

  int QueryUsers::ByteSize() const
  {
    int total_size = 0;

    // repeated uint32 ids = 1;
    {
      int data_size = 0;
      for (int i = 0; i < this->ids_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->ids(i));
        }
      total_size += 1 * this->ids_size() + data_size;
    }

    // repeated string names = 2;
    total_size += 1 * this->names_size();
    for (int i = 0; i < this->names_size(); i++)
      {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->names(i));
      }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void QueryUsers::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const QueryUsers* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const QueryUsers*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void QueryUsers::MergeFrom(const QueryUsers& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    ids_.MergeFrom(from.ids_);
    names_.MergeFrom(from.names_);
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void QueryUsers::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void QueryUsers::CopyFrom(const QueryUsers& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool QueryUsers::IsInitialized() const
  {

    return true;
  }

  void QueryUsers::Swap(QueryUsers* other)
  {
    if (other != this)
      {
        ids_.Swap(&other->ids_);
        names_.Swap(&other->names_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata QueryUsers::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = QueryUsers_descriptor_;
    metadata.reflection = QueryUsers_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int CryptSetup::kKeyFieldNumber;
  const int CryptSetup::kClientNonceFieldNumber;
  const int CryptSetup::kServerNonceFieldNumber;
#endif  // !_MSC_VER

  CryptSetup::CryptSetup()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.CryptSetup)
  }

  void CryptSetup::InitAsDefaultInstance()
  {
  }

  CryptSetup::CryptSetup(const CryptSetup& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.CryptSetup)
  }

  void CryptSetup::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    key_ = const_cast< ::std::string*>
           (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    client_nonce_ = const_cast< ::std::string*>
                    (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    server_nonce_ = const_cast< ::std::string*>
                    (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  CryptSetup::~CryptSetup()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.CryptSetup)
    SharedDtor();
  }

  void CryptSetup::SharedDtor()
  {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete key_;
      }
    if (client_nonce_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete client_nonce_;
      }
    if (server_nonce_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete server_nonce_;
      }
    if (this != default_instance_)
      {
      }
  }

  void CryptSetup::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* CryptSetup::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return CryptSetup_descriptor_;
  }

  const CryptSetup& CryptSetup::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  CryptSetup* CryptSetup::default_instance_ = NULL;

  CryptSetup* CryptSetup::New() const
  {
    return new CryptSetup;
  }

  void CryptSetup::Clear()
  {
    if (_has_bits_[0 / 32] & 7)
      {
        if (has_key())
          {
            if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                key_->clear();
              }
          }
        if (has_client_nonce())
          {
            if (client_nonce_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                client_nonce_->clear();
              }
          }
        if (has_server_nonce())
          {
            if (server_nonce_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                server_nonce_->clear();
              }
          }
      }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool CryptSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.CryptSetup)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional bytes key = 1;
          case 1:
          {
            if (tag == 10)
              {
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_key()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_client_nonce;
            break;
          }

          // optional bytes client_nonce = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_client_nonce:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_client_nonce()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_server_nonce;
            break;
          }

          // optional bytes server_nonce = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_server_nonce:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_server_nonce()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.CryptSetup)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.CryptSetup)
    return false;
#undef DO_
  }

  void CryptSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.CryptSetup)
    // optional bytes key = 1;
    if (has_key())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          1, this->key(), output);
      }

    // optional bytes client_nonce = 2;
    if (has_client_nonce())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          2, this->client_nonce(), output);
      }

    // optional bytes server_nonce = 3;
    if (has_server_nonce())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          3, this->server_nonce(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.CryptSetup)
  }

  ::google::protobuf::uint8* CryptSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.CryptSetup)
    // optional bytes key = 1;
    if (has_key())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            1, this->key(), target);
      }

    // optional bytes client_nonce = 2;
    if (has_client_nonce())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            2, this->client_nonce(), target);
      }

    // optional bytes server_nonce = 3;
    if (has_server_nonce())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            3, this->server_nonce(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.CryptSetup)
    return target;
  }

  int CryptSetup::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional bytes key = 1;
        if (has_key())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->key());
          }

        // optional bytes client_nonce = 2;
        if (has_client_nonce())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->client_nonce());
          }

        // optional bytes server_nonce = 3;
        if (has_server_nonce())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->server_nonce());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void CryptSetup::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const CryptSetup* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const CryptSetup*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void CryptSetup::MergeFrom(const CryptSetup& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_key())
          {
            set_key(from.key());
          }
        if (from.has_client_nonce())
          {
            set_client_nonce(from.client_nonce());
          }
        if (from.has_server_nonce())
          {
            set_server_nonce(from.server_nonce());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void CryptSetup::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void CryptSetup::CopyFrom(const CryptSetup& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool CryptSetup::IsInitialized() const
  {

    return true;
  }

  void CryptSetup::Swap(CryptSetup* other)
  {
    if (other != this)
      {
        std::swap(key_, other->key_);
        std::swap(client_nonce_, other->client_nonce_);
        std::swap(server_nonce_, other->server_nonce_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata CryptSetup::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = CryptSetup_descriptor_;
    metadata.reflection = CryptSetup_reflection_;
    return metadata;
  }


// ===================================================================

  const ::google::protobuf::EnumDescriptor*
  ContextActionModify_Context_descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ContextActionModify_Context_descriptor_;
  }
  bool ContextActionModify_Context_IsValid(int value)
  {
    switch(value)
      {
      case 1:
      case 2:
      case 4:
        return true;
      default:
        return false;
      }
  }

#ifndef _MSC_VER
  const ContextActionModify_Context ContextActionModify::Server;
  const ContextActionModify_Context ContextActionModify::Channel;
  const ContextActionModify_Context ContextActionModify::User;
  const ContextActionModify_Context ContextActionModify::Context_MIN;
  const ContextActionModify_Context ContextActionModify::Context_MAX;
  const int ContextActionModify::Context_ARRAYSIZE;
#endif  // _MSC_VER
  const ::google::protobuf::EnumDescriptor*
  ContextActionModify_Operation_descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ContextActionModify_Operation_descriptor_;
  }
  bool ContextActionModify_Operation_IsValid(int value)
  {
    switch(value)
      {
      case 0:
      case 1:
        return true;
      default:
        return false;
      }
  }

#ifndef _MSC_VER
  const ContextActionModify_Operation ContextActionModify::Add;
  const ContextActionModify_Operation ContextActionModify::Remove;
  const ContextActionModify_Operation ContextActionModify::Operation_MIN;
  const ContextActionModify_Operation ContextActionModify::Operation_MAX;
  const int ContextActionModify::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
  const int ContextActionModify::kActionFieldNumber;
  const int ContextActionModify::kTextFieldNumber;
  const int ContextActionModify::kContextFieldNumber;
  const int ContextActionModify::kOperationFieldNumber;
#endif  // !_MSC_VER

  ContextActionModify::ContextActionModify()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ContextActionModify)
  }

  void ContextActionModify::InitAsDefaultInstance()
  {
  }

  ContextActionModify::ContextActionModify(const ContextActionModify& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ContextActionModify)
  }

  void ContextActionModify::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    action_ = const_cast< ::std::string*>
              (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    text_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    context_ = 0u;
    operation_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ContextActionModify::~ContextActionModify()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ContextActionModify)
    SharedDtor();
  }

  void ContextActionModify::SharedDtor()
  {
    if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete action_;
      }
    if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete text_;
      }
    if (this != default_instance_)
      {
      }
  }

  void ContextActionModify::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ContextActionModify::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ContextActionModify_descriptor_;
  }

  const ContextActionModify& ContextActionModify::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ContextActionModify* ContextActionModify::default_instance_ = NULL;

  ContextActionModify* ContextActionModify::New() const
  {
    return new ContextActionModify;
  }

  void ContextActionModify::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContextActionModify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 15)
      {
        ZR_(context_, operation_);
        if (has_action())
          {
            if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                action_->clear();
              }
          }
        if (has_text())
          {
            if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                text_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ContextActionModify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ContextActionModify)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required string action = 1;
          case 1:
          {
            if (tag == 10)
              {
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_action()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->action().data(), this->action().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "action");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_text;
            break;
          }

          // optional string text = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_text:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_text()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->text().data(), this->text().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "text");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_context;
            break;
          }

          // optional uint32 context = 3;
          case 3:
          {
            if (tag == 24)
              {
parse_context:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &context_)));
                set_has_context();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_operation;
            break;
          }

          // optional .MumbleProto.ContextActionModify.Operation operation = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_operation:
                int value;
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                       input, &value)));
                if (::MumbleProto::ContextActionModify_Operation_IsValid(value))
                  {
                    set_operation(static_cast< ::MumbleProto::ContextActionModify_Operation >
                                  (value));
                  }
                else
                  {
                    mutable_unknown_fields()->AddVarint(4, value);
                  }
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ContextActionModify)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ContextActionModify)
    return false;
#undef DO_
  }

  void ContextActionModify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ContextActionModify)
    // required string action = 1;
    if (has_action())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->action().data(), this->action().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "action");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          1, this->action(), output);
      }

    // optional string text = 2;
    if (has_text())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->text().data(), this->text().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "text");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          2, this->text(), output);
      }

    // optional uint32 context = 3;
    if (has_context())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->context(),
            output);
      }

    // optional .MumbleProto.ContextActionModify.Operation operation = 4;
    if (has_operation())
      {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
          4, this->operation(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ContextActionModify)
  }

  ::google::protobuf::uint8* ContextActionModify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ContextActionModify)
    // required string action = 1;
    if (has_action())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->action().data(), this->action().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "action");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            1, this->action(), target);
      }

    // optional string text = 2;
    if (has_text())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->text().data(), this->text().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "text");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            2, this->text(), target);
      }

    // optional uint32 context = 3;
    if (has_context())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3,
                 this->context(), target);
      }

    // optional .MumbleProto.ContextActionModify.Operation operation = 4;
    if (has_operation())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                   4, this->operation(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ContextActionModify)
    return target;
  }

  int ContextActionModify::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required string action = 1;
        if (has_action())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->action());
          }

        // optional string text = 2;
        if (has_text())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->text());
          }

        // optional uint32 context = 3;
        if (has_context())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->context());
          }

        // optional .MumbleProto.ContextActionModify.Operation operation = 4;
        if (has_operation())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ContextActionModify::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ContextActionModify* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ContextActionModify*>
      (
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ContextActionModify::MergeFrom(const ContextActionModify& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_action())
          {
            set_action(from.action());
          }
        if (from.has_text())
          {
            set_text(from.text());
          }
        if (from.has_context())
          {
            set_context(from.context());
          }
        if (from.has_operation())
          {
            set_operation(from.operation());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ContextActionModify::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ContextActionModify::CopyFrom(const ContextActionModify& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ContextActionModify::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
  }

  void ContextActionModify::Swap(ContextActionModify* other)
  {
    if (other != this)
      {
        std::swap(action_, other->action_);
        std::swap(text_, other->text_);
        std::swap(context_, other->context_);
        std::swap(operation_, other->operation_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ContextActionModify::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ContextActionModify_descriptor_;
    metadata.reflection = ContextActionModify_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int ContextAction::kSessionFieldNumber;
  const int ContextAction::kChannelIdFieldNumber;
  const int ContextAction::kActionFieldNumber;
#endif  // !_MSC_VER

  ContextAction::ContextAction()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ContextAction)
  }

  void ContextAction::InitAsDefaultInstance()
  {
  }

  ContextAction::ContextAction(const ContextAction& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ContextAction)
  }

  void ContextAction::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    session_ = 0u;
    channel_id_ = 0u;
    action_ = const_cast< ::std::string*>
              (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ContextAction::~ContextAction()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ContextAction)
    SharedDtor();
  }

  void ContextAction::SharedDtor()
  {
    if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete action_;
      }
    if (this != default_instance_)
      {
      }
  }

  void ContextAction::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ContextAction::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ContextAction_descriptor_;
  }

  const ContextAction& ContextAction::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ContextAction* ContextAction::default_instance_ = NULL;

  ContextAction* ContextAction::New() const
  {
    return new ContextAction;
  }

  void ContextAction::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContextAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 7)
      {
        ZR_(session_, channel_id_);
        if (has_action())
          {
            if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                action_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ContextAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ContextAction)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 session = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &session_)));
                set_has_session();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_channel_id;
            break;
          }

          // optional uint32 channel_id = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_channel_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &channel_id_)));
                set_has_channel_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_action;
            break;
          }

          // required string action = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_action:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_action()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->action().data(), this->action().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "action");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ContextAction)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ContextAction)
    return false;
#undef DO_
  }

  void ContextAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ContextAction)
    // optional uint32 session = 1;
    if (has_session())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(),
            output);
      }

    // optional uint32 channel_id = 2;
    if (has_channel_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(),
            output);
      }

    // required string action = 3;
    if (has_action())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->action().data(), this->action().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "action");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->action(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ContextAction)
  }

  ::google::protobuf::uint8* ContextAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ContextAction)
    // optional uint32 session = 1;
    if (has_session())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->session(), target);
      }

    // optional uint32 channel_id = 2;
    if (has_channel_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->channel_id(), target);
      }

    // required string action = 3;
    if (has_action())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->action().data(), this->action().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "action");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->action(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ContextAction)
    return target;
  }

  int ContextAction::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 session = 1;
        if (has_session())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->session());
          }

        // optional uint32 channel_id = 2;
        if (has_channel_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->channel_id());
          }

        // required string action = 3;
        if (has_action())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->action());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ContextAction::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ContextAction* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ContextAction*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ContextAction::MergeFrom(const ContextAction& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_session())
          {
            set_session(from.session());
          }
        if (from.has_channel_id())
          {
            set_channel_id(from.channel_id());
          }
        if (from.has_action())
          {
            set_action(from.action());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ContextAction::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ContextAction::CopyFrom(const ContextAction& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ContextAction::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

    return true;
  }

  void ContextAction::Swap(ContextAction* other)
  {
    if (other != this)
      {
        std::swap(session_, other->session_);
        std::swap(channel_id_, other->channel_id_);
        std::swap(action_, other->action_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ContextAction::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ContextAction_descriptor_;
    metadata.reflection = ContextAction_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int UserList_User::kUserIdFieldNumber;
  const int UserList_User::kNameFieldNumber;
  const int UserList_User::kLastSeenFieldNumber;
  const int UserList_User::kLastChannelFieldNumber;
#endif  // !_MSC_VER

  UserList_User::UserList_User()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.UserList.User)
  }

  void UserList_User::InitAsDefaultInstance()
  {
  }

  UserList_User::UserList_User(const UserList_User& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.UserList.User)
  }

  void UserList_User::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    user_id_ = 0u;
    name_ = const_cast< ::std::string*>
            (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    last_seen_ = const_cast< ::std::string*>
                 (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    last_channel_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  UserList_User::~UserList_User()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.UserList.User)
    SharedDtor();
  }

  void UserList_User::SharedDtor()
  {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete name_;
      }
    if (last_seen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete last_seen_;
      }
    if (this != default_instance_)
      {
      }
  }

  void UserList_User::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* UserList_User::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return UserList_User_descriptor_;
  }

  const UserList_User& UserList_User::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  UserList_User* UserList_User::default_instance_ = NULL;

  UserList_User* UserList_User::New() const
  {
    return new UserList_User;
  }

  void UserList_User::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserList_User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 15)
      {
        ZR_(user_id_, last_channel_);
        if (has_name())
          {
            if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                name_->clear();
              }
          }
        if (has_last_seen())
          {
            if (last_seen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                last_seen_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool UserList_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.UserList.User)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required uint32 user_id = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &user_id_)));
                set_has_user_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_name;
            break;
          }

          // optional string name = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_name:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_name()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->name().data(), this->name().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "name");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_last_seen;
            break;
          }

          // optional string last_seen = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_last_seen:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_last_seen()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->last_seen().data(), this->last_seen().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "last_seen");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_last_channel;
            break;
          }

          // optional uint32 last_channel = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_last_channel:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &last_channel_)));
                set_has_last_channel();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.UserList.User)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.UserList.User)
    return false;
#undef DO_
  }

  void UserList_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.UserList.User)
    // required uint32 user_id = 1;
    if (has_user_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(),
            output);
      }

    // optional string name = 2;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          2, this->name(), output);
      }

    // optional string last_seen = 3;
    if (has_last_seen())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->last_seen().data(), this->last_seen().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "last_seen");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->last_seen(), output);
      }

    // optional uint32 last_channel = 4;
    if (has_last_channel())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4,
            this->last_channel(), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.UserList.User)
  }

  ::google::protobuf::uint8* UserList_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserList.User)
    // required uint32 user_id = 1;
    if (has_user_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->user_id(), target);
      }

    // optional string name = 2;
    if (has_name())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "name");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            2, this->name(), target);
      }

    // optional string last_seen = 3;
    if (has_last_seen())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->last_seen().data(), this->last_seen().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "last_seen");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->last_seen(), target);
      }

    // optional uint32 last_channel = 4;
    if (has_last_channel())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4,
                 this->last_channel(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserList.User)
    return target;
  }

  int UserList_User::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required uint32 user_id = 1;
        if (has_user_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->user_id());
          }

        // optional string name = 2;
        if (has_name())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->name());
          }

        // optional string last_seen = 3;
        if (has_last_seen())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->last_seen());
          }

        // optional uint32 last_channel = 4;
        if (has_last_channel())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->last_channel());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void UserList_User::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const UserList_User* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const UserList_User*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void UserList_User::MergeFrom(const UserList_User& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_user_id())
          {
            set_user_id(from.user_id());
          }
        if (from.has_name())
          {
            set_name(from.name());
          }
        if (from.has_last_seen())
          {
            set_last_seen(from.last_seen());
          }
        if (from.has_last_channel())
          {
            set_last_channel(from.last_channel());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void UserList_User::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void UserList_User::CopyFrom(const UserList_User& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool UserList_User::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

    return true;
  }

  void UserList_User::Swap(UserList_User* other)
  {
    if (other != this)
      {
        std::swap(user_id_, other->user_id_);
        std::swap(name_, other->name_);
        std::swap(last_seen_, other->last_seen_);
        std::swap(last_channel_, other->last_channel_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata UserList_User::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = UserList_User_descriptor_;
    metadata.reflection = UserList_User_reflection_;
    return metadata;
  }


// -------------------------------------------------------------------

#ifndef _MSC_VER
  const int UserList::kUsersFieldNumber;
#endif  // !_MSC_VER

  UserList::UserList()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.UserList)
  }

  void UserList::InitAsDefaultInstance()
  {
  }

  UserList::UserList(const UserList& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.UserList)
  }

  void UserList::SharedCtor()
  {
    _cached_size_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  UserList::~UserList()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.UserList)
    SharedDtor();
  }

  void UserList::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void UserList::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* UserList::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return UserList_descriptor_;
  }

  const UserList& UserList::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  UserList* UserList::default_instance_ = NULL;

  UserList* UserList::New() const
  {
    return new UserList;
  }

  void UserList::Clear()
  {
    users_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.UserList)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // repeated .MumbleProto.UserList.User users = 1;
          case 1:
          {
            if (tag == 10)
              {
parse_users:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                      input, add_users()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(10)) goto parse_users;
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.UserList)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.UserList)
    return false;
#undef DO_
  }

  void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.UserList)
    // repeated .MumbleProto.UserList.User users = 1;
    for (int i = 0; i < this->users_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, this->users(i), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.UserList)
  }

  ::google::protobuf::uint8* UserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserList)
    // repeated .MumbleProto.UserList.User users = 1;
    for (int i = 0; i < this->users_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteMessageNoVirtualToArray(
                   1, this->users(i), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserList)
    return target;
  }

  int UserList::ByteSize() const
  {
    int total_size = 0;

    // repeated .MumbleProto.UserList.User users = 1;
    total_size += 1 * this->users_size();
    for (int i = 0; i < this->users_size(); i++)
      {
        total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->users(i));
      }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void UserList::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const UserList* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const UserList*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void UserList::MergeFrom(const UserList& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    users_.MergeFrom(from.users_);
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void UserList::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void UserList::CopyFrom(const UserList& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool UserList::IsInitialized() const
  {

    if (!::google::protobuf::internal::AllAreInitialized(this->users())) return
        false;
    return true;
  }

  void UserList::Swap(UserList* other)
  {
    if (other != this)
      {
        users_.Swap(&other->users_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata UserList::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = UserList_descriptor_;
    metadata.reflection = UserList_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int VoiceTarget_Target::kSessionFieldNumber;
  const int VoiceTarget_Target::kChannelIdFieldNumber;
  const int VoiceTarget_Target::kGroupFieldNumber;
  const int VoiceTarget_Target::kLinksFieldNumber;
  const int VoiceTarget_Target::kChildrenFieldNumber;
#endif  // !_MSC_VER

  VoiceTarget_Target::VoiceTarget_Target()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.VoiceTarget.Target)
  }

  void VoiceTarget_Target::InitAsDefaultInstance()
  {
  }

  VoiceTarget_Target::VoiceTarget_Target(const VoiceTarget_Target& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.VoiceTarget.Target)
  }

  void VoiceTarget_Target::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    channel_id_ = 0u;
    group_ = const_cast< ::std::string*>
             (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    links_ = false;
    children_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  VoiceTarget_Target::~VoiceTarget_Target()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.VoiceTarget.Target)
    SharedDtor();
  }

  void VoiceTarget_Target::SharedDtor()
  {
    if (group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete group_;
      }
    if (this != default_instance_)
      {
      }
  }

  void VoiceTarget_Target::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* VoiceTarget_Target::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return VoiceTarget_Target_descriptor_;
  }

  const VoiceTarget_Target& VoiceTarget_Target::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  VoiceTarget_Target* VoiceTarget_Target::default_instance_ = NULL;

  VoiceTarget_Target* VoiceTarget_Target::New() const
  {
    return new VoiceTarget_Target;
  }

  void VoiceTarget_Target::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VoiceTarget_Target*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 30)
      {
        ZR_(channel_id_, children_);
        if (has_group())
          {
            if (group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                group_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    session_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool VoiceTarget_Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.VoiceTarget.Target)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // repeated uint32 session = 1;
          case 1:
          {
            if (tag == 8)
              {
parse_session:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 8, input, this->mutable_session())));
              }
            else if (tag == 10)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_session())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(8)) goto parse_session;
            if (input->ExpectTag(16)) goto parse_channel_id;
            break;
          }

          // optional uint32 channel_id = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_channel_id:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &channel_id_)));
                set_has_channel_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_group;
            break;
          }

          // optional string group = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_group:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_group()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->group().data(), this->group().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "group");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_links;
            break;
          }

          // optional bool links = 4 [default = false];
          case 4:
          {
            if (tag == 32)
              {
parse_links:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &links_)));
                set_has_links();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(40)) goto parse_children;
            break;
          }

          // optional bool children = 5 [default = false];
          case 5:
          {
            if (tag == 40)
              {
parse_children:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &children_)));
                set_has_children();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.VoiceTarget.Target)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.VoiceTarget.Target)
    return false;
#undef DO_
  }

  void VoiceTarget_Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.VoiceTarget.Target)
    // repeated uint32 session = 1;
    for (int i = 0; i < this->session_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          1, this->session(i), output);
      }

    // optional uint32 channel_id = 2;
    if (has_channel_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(),
            output);
      }

    // optional string group = 3;
    if (has_group())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->group().data(), this->group().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "group");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          3, this->group(), output);
      }

    // optional bool links = 4 [default = false];
    if (has_links())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->links(),
            output);
      }

    // optional bool children = 5 [default = false];
    if (has_children())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->children(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.VoiceTarget.Target)
  }

  ::google::protobuf::uint8* VoiceTarget_Target::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.VoiceTarget.Target)
    // repeated uint32 session = 1;
    for (int i = 0; i < this->session_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(1, this->session(i), target);
      }

    // optional uint32 channel_id = 2;
    if (has_channel_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->channel_id(), target);
      }

    // optional string group = 3;
    if (has_group())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->group().data(), this->group().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "group");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            3, this->group(), target);
      }

    // optional bool links = 4 [default = false];
    if (has_links())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4,
                 this->links(), target);
      }

    // optional bool children = 5 [default = false];
    if (has_children())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5,
                 this->children(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.VoiceTarget.Target)
    return target;
  }

  int VoiceTarget_Target::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[1 / 32] & (0xffu << (1 % 32)))
      {
        // optional uint32 channel_id = 2;
        if (has_channel_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->channel_id());
          }

        // optional string group = 3;
        if (has_group())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->group());
          }

        // optional bool links = 4 [default = false];
        if (has_links())
          {
            total_size += 1 + 1;
          }

        // optional bool children = 5 [default = false];
        if (has_children())
          {
            total_size += 1 + 1;
          }

      }
    // repeated uint32 session = 1;
    {
      int data_size = 0;
      for (int i = 0; i < this->session_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->session(i));
        }
      total_size += 1 * this->session_size() + data_size;
    }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void VoiceTarget_Target::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const VoiceTarget_Target* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const VoiceTarget_Target*>
      (
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void VoiceTarget_Target::MergeFrom(const VoiceTarget_Target& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    session_.MergeFrom(from.session_);
    if (from._has_bits_[1 / 32] & (0xffu << (1 % 32)))
      {
        if (from.has_channel_id())
          {
            set_channel_id(from.channel_id());
          }
        if (from.has_group())
          {
            set_group(from.group());
          }
        if (from.has_links())
          {
            set_links(from.links());
          }
        if (from.has_children())
          {
            set_children(from.children());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void VoiceTarget_Target::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void VoiceTarget_Target::CopyFrom(const VoiceTarget_Target& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool VoiceTarget_Target::IsInitialized() const
  {

    return true;
  }

  void VoiceTarget_Target::Swap(VoiceTarget_Target* other)
  {
    if (other != this)
      {
        session_.Swap(&other->session_);
        std::swap(channel_id_, other->channel_id_);
        std::swap(group_, other->group_);
        std::swap(links_, other->links_);
        std::swap(children_, other->children_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata VoiceTarget_Target::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = VoiceTarget_Target_descriptor_;
    metadata.reflection = VoiceTarget_Target_reflection_;
    return metadata;
  }


// -------------------------------------------------------------------

#ifndef _MSC_VER
  const int VoiceTarget::kIdFieldNumber;
  const int VoiceTarget::kTargetsFieldNumber;
#endif  // !_MSC_VER

  VoiceTarget::VoiceTarget()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.VoiceTarget)
  }

  void VoiceTarget::InitAsDefaultInstance()
  {
  }

  VoiceTarget::VoiceTarget(const VoiceTarget& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.VoiceTarget)
  }

  void VoiceTarget::SharedCtor()
  {
    _cached_size_ = 0;
    id_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  VoiceTarget::~VoiceTarget()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.VoiceTarget)
    SharedDtor();
  }

  void VoiceTarget::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void VoiceTarget::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* VoiceTarget::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return VoiceTarget_descriptor_;
  }

  const VoiceTarget& VoiceTarget::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  VoiceTarget* VoiceTarget::default_instance_ = NULL;

  VoiceTarget* VoiceTarget::New() const
  {
    return new VoiceTarget;
  }

  void VoiceTarget::Clear()
  {
    id_ = 0u;
    targets_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool VoiceTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.VoiceTarget)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 id = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &id_)));
                set_has_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_targets;
            break;
          }

          // repeated .MumbleProto.VoiceTarget.Target targets = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_targets:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                      input, add_targets()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_targets;
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.VoiceTarget)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.VoiceTarget)
    return false;
#undef DO_
  }

  void VoiceTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.VoiceTarget)
    // optional uint32 id = 1;
    if (has_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(),
            output);
      }

    // repeated .MumbleProto.VoiceTarget.Target targets = 2;
    for (int i = 0; i < this->targets_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, this->targets(i), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.VoiceTarget)
  }

  ::google::protobuf::uint8* VoiceTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.VoiceTarget)
    // optional uint32 id = 1;
    if (has_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->id(), target);
      }

    // repeated .MumbleProto.VoiceTarget.Target targets = 2;
    for (int i = 0; i < this->targets_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteMessageNoVirtualToArray(
                   2, this->targets(i), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.VoiceTarget)
    return target;
  }

  int VoiceTarget::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 id = 1;
        if (has_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->id());
          }

      }
    // repeated .MumbleProto.VoiceTarget.Target targets = 2;
    total_size += 1 * this->targets_size();
    for (int i = 0; i < this->targets_size(); i++)
      {
        total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->targets(i));
      }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void VoiceTarget::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const VoiceTarget* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const VoiceTarget*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void VoiceTarget::MergeFrom(const VoiceTarget& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    targets_.MergeFrom(from.targets_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_id())
          {
            set_id(from.id());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void VoiceTarget::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void VoiceTarget::CopyFrom(const VoiceTarget& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool VoiceTarget::IsInitialized() const
  {

    return true;
  }

  void VoiceTarget::Swap(VoiceTarget* other)
  {
    if (other != this)
      {
        std::swap(id_, other->id_);
        targets_.Swap(&other->targets_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata VoiceTarget::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = VoiceTarget_descriptor_;
    metadata.reflection = VoiceTarget_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int PermissionQuery::kChannelIdFieldNumber;
  const int PermissionQuery::kPermissionsFieldNumber;
  const int PermissionQuery::kFlushFieldNumber;
#endif  // !_MSC_VER

  PermissionQuery::PermissionQuery()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.PermissionQuery)
  }

  void PermissionQuery::InitAsDefaultInstance()
  {
  }

  PermissionQuery::PermissionQuery(const PermissionQuery& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.PermissionQuery)
  }

  void PermissionQuery::SharedCtor()
  {
    _cached_size_ = 0;
    channel_id_ = 0u;
    permissions_ = 0u;
    flush_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  PermissionQuery::~PermissionQuery()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.PermissionQuery)
    SharedDtor();
  }

  void PermissionQuery::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void PermissionQuery::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* PermissionQuery::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return PermissionQuery_descriptor_;
  }

  const PermissionQuery& PermissionQuery::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  PermissionQuery* PermissionQuery::default_instance_ = NULL;

  PermissionQuery* PermissionQuery::New() const
  {
    return new PermissionQuery;
  }

  void PermissionQuery::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PermissionQuery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    ZR_(channel_id_, flush_);

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool PermissionQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.PermissionQuery)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 channel_id = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &channel_id_)));
                set_has_channel_id();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_permissions;
            break;
          }

          // optional uint32 permissions = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_permissions:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &permissions_)));
                set_has_permissions();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_flush;
            break;
          }

          // optional bool flush = 3 [default = false];
          case 3:
          {
            if (tag == 24)
              {
parse_flush:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &flush_)));
                set_has_flush();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.PermissionQuery)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.PermissionQuery)
    return false;
#undef DO_
  }

  void PermissionQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.PermissionQuery)
    // optional uint32 channel_id = 1;
    if (has_channel_id())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(),
            output);
      }

    // optional uint32 permissions = 2;
    if (has_permissions())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2,
            this->permissions(), output);
      }

    // optional bool flush = 3 [default = false];
    if (has_flush())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flush(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.PermissionQuery)
  }

  ::google::protobuf::uint8* PermissionQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.PermissionQuery)
    // optional uint32 channel_id = 1;
    if (has_channel_id())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->channel_id(), target);
      }

    // optional uint32 permissions = 2;
    if (has_permissions())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->permissions(), target);
      }

    // optional bool flush = 3 [default = false];
    if (has_flush())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3,
                 this->flush(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.PermissionQuery)
    return target;
  }

  int PermissionQuery::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 channel_id = 1;
        if (has_channel_id())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->channel_id());
          }

        // optional uint32 permissions = 2;
        if (has_permissions())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->permissions());
          }

        // optional bool flush = 3 [default = false];
        if (has_flush())
          {
            total_size += 1 + 1;
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void PermissionQuery::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const PermissionQuery* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const PermissionQuery*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void PermissionQuery::MergeFrom(const PermissionQuery& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_channel_id())
          {
            set_channel_id(from.channel_id());
          }
        if (from.has_permissions())
          {
            set_permissions(from.permissions());
          }
        if (from.has_flush())
          {
            set_flush(from.flush());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void PermissionQuery::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void PermissionQuery::CopyFrom(const PermissionQuery& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool PermissionQuery::IsInitialized() const
  {

    return true;
  }

  void PermissionQuery::Swap(PermissionQuery* other)
  {
    if (other != this)
      {
        std::swap(channel_id_, other->channel_id_);
        std::swap(permissions_, other->permissions_);
        std::swap(flush_, other->flush_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata PermissionQuery::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = PermissionQuery_descriptor_;
    metadata.reflection = PermissionQuery_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int CodecVersion::kAlphaFieldNumber;
  const int CodecVersion::kBetaFieldNumber;
  const int CodecVersion::kPreferAlphaFieldNumber;
  const int CodecVersion::kOpusFieldNumber;
#endif  // !_MSC_VER

  CodecVersion::CodecVersion()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.CodecVersion)
  }

  void CodecVersion::InitAsDefaultInstance()
  {
  }

  CodecVersion::CodecVersion(const CodecVersion& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.CodecVersion)
  }

  void CodecVersion::SharedCtor()
  {
    _cached_size_ = 0;
    alpha_ = 0;
    beta_ = 0;
    prefer_alpha_ = true;
    opus_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  CodecVersion::~CodecVersion()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.CodecVersion)
    SharedDtor();
  }

  void CodecVersion::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void CodecVersion::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* CodecVersion::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return CodecVersion_descriptor_;
  }

  const CodecVersion& CodecVersion::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  CodecVersion* CodecVersion::default_instance_ = NULL;

  CodecVersion* CodecVersion::New() const
  {
    return new CodecVersion;
  }

  void CodecVersion::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CodecVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 15)
      {
        ZR_(alpha_, beta_);
        prefer_alpha_ = true;
        opus_ = false;
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool CodecVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.CodecVersion)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // required int32 alpha = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                       input, &alpha_)));
                set_has_alpha();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_beta;
            break;
          }

          // required int32 beta = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_beta:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                       input, &beta_)));
                set_has_beta();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_prefer_alpha;
            break;
          }

          // required bool prefer_alpha = 3 [default = true];
          case 3:
          {
            if (tag == 24)
              {
parse_prefer_alpha:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &prefer_alpha_)));
                set_has_prefer_alpha();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_opus;
            break;
          }

          // optional bool opus = 4 [default = false];
          case 4:
          {
            if (tag == 32)
              {
parse_opus:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &opus_)));
                set_has_opus();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.CodecVersion)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.CodecVersion)
    return false;
#undef DO_
  }

  void CodecVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.CodecVersion)
    // required int32 alpha = 1;
    if (has_alpha())
      {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->alpha(),
            output);
      }

    // required int32 beta = 2;
    if (has_beta())
      {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beta(),
            output);
      }

    // required bool prefer_alpha = 3 [default = true];
    if (has_prefer_alpha())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prefer_alpha(),
            output);
      }

    // optional bool opus = 4 [default = false];
    if (has_opus())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->opus(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.CodecVersion)
  }

  ::google::protobuf::uint8* CodecVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.CodecVersion)
    // required int32 alpha = 1;
    if (has_alpha())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1,
                 this->alpha(), target);
      }

    // required int32 beta = 2;
    if (has_beta())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2,
                 this->beta(), target);
      }

    // required bool prefer_alpha = 3 [default = true];
    if (has_prefer_alpha())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3,
                 this->prefer_alpha(), target);
      }

    // optional bool opus = 4 [default = false];
    if (has_opus())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4,
                 this->opus(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.CodecVersion)
    return target;
  }

  int CodecVersion::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // required int32 alpha = 1;
        if (has_alpha())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->alpha());
          }

        // required int32 beta = 2;
        if (has_beta())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->beta());
          }

        // required bool prefer_alpha = 3 [default = true];
        if (has_prefer_alpha())
          {
            total_size += 1 + 1;
          }

        // optional bool opus = 4 [default = false];
        if (has_opus())
          {
            total_size += 1 + 1;
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void CodecVersion::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const CodecVersion* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const CodecVersion*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void CodecVersion::MergeFrom(const CodecVersion& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_alpha())
          {
            set_alpha(from.alpha());
          }
        if (from.has_beta())
          {
            set_beta(from.beta());
          }
        if (from.has_prefer_alpha())
          {
            set_prefer_alpha(from.prefer_alpha());
          }
        if (from.has_opus())
          {
            set_opus(from.opus());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void CodecVersion::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void CodecVersion::CopyFrom(const CodecVersion& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool CodecVersion::IsInitialized() const
  {
    if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

    return true;
  }

  void CodecVersion::Swap(CodecVersion* other)
  {
    if (other != this)
      {
        std::swap(alpha_, other->alpha_);
        std::swap(beta_, other->beta_);
        std::swap(prefer_alpha_, other->prefer_alpha_);
        std::swap(opus_, other->opus_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata CodecVersion::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = CodecVersion_descriptor_;
    metadata.reflection = CodecVersion_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int UserStats_Stats::kGoodFieldNumber;
  const int UserStats_Stats::kLateFieldNumber;
  const int UserStats_Stats::kLostFieldNumber;
  const int UserStats_Stats::kResyncFieldNumber;
#endif  // !_MSC_VER

  UserStats_Stats::UserStats_Stats()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.UserStats.Stats)
  }

  void UserStats_Stats::InitAsDefaultInstance()
  {
  }

  UserStats_Stats::UserStats_Stats(const UserStats_Stats& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.UserStats.Stats)
  }

  void UserStats_Stats::SharedCtor()
  {
    _cached_size_ = 0;
    good_ = 0u;
    late_ = 0u;
    lost_ = 0u;
    resync_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  UserStats_Stats::~UserStats_Stats()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.UserStats.Stats)
    SharedDtor();
  }

  void UserStats_Stats::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void UserStats_Stats::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* UserStats_Stats::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return UserStats_Stats_descriptor_;
  }

  const UserStats_Stats& UserStats_Stats::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  UserStats_Stats* UserStats_Stats::default_instance_ = NULL;

  UserStats_Stats* UserStats_Stats::New() const
  {
    return new UserStats_Stats;
  }

  void UserStats_Stats::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserStats_Stats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    ZR_(good_, resync_);

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool UserStats_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.UserStats.Stats)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 good = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &good_)));
                set_has_good();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_late;
            break;
          }

          // optional uint32 late = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_late:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &late_)));
                set_has_late();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_lost;
            break;
          }

          // optional uint32 lost = 3;
          case 3:
          {
            if (tag == 24)
              {
parse_lost:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &lost_)));
                set_has_lost();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_resync;
            break;
          }

          // optional uint32 resync = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_resync:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &resync_)));
                set_has_resync();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.UserStats.Stats)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.UserStats.Stats)
    return false;
#undef DO_
  }

  void UserStats_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.UserStats.Stats)
    // optional uint32 good = 1;
    if (has_good())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->good(),
            output);
      }

    // optional uint32 late = 2;
    if (has_late())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->late(),
            output);
      }

    // optional uint32 lost = 3;
    if (has_lost())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lost(),
            output);
      }

    // optional uint32 resync = 4;
    if (has_resync())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resync(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.UserStats.Stats)
  }

  ::google::protobuf::uint8* UserStats_Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserStats.Stats)
    // optional uint32 good = 1;
    if (has_good())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->good(), target);
      }

    // optional uint32 late = 2;
    if (has_late())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2,
                 this->late(), target);
      }

    // optional uint32 lost = 3;
    if (has_lost())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3,
                 this->lost(), target);
      }

    // optional uint32 resync = 4;
    if (has_resync())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4,
                 this->resync(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserStats.Stats)
    return target;
  }

  int UserStats_Stats::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 good = 1;
        if (has_good())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->good());
          }

        // optional uint32 late = 2;
        if (has_late())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->late());
          }

        // optional uint32 lost = 3;
        if (has_lost())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->lost());
          }

        // optional uint32 resync = 4;
        if (has_resync())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->resync());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void UserStats_Stats::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const UserStats_Stats* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const UserStats_Stats*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void UserStats_Stats::MergeFrom(const UserStats_Stats& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_good())
          {
            set_good(from.good());
          }
        if (from.has_late())
          {
            set_late(from.late());
          }
        if (from.has_lost())
          {
            set_lost(from.lost());
          }
        if (from.has_resync())
          {
            set_resync(from.resync());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void UserStats_Stats::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void UserStats_Stats::CopyFrom(const UserStats_Stats& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool UserStats_Stats::IsInitialized() const
  {

    return true;
  }

  void UserStats_Stats::Swap(UserStats_Stats* other)
  {
    if (other != this)
      {
        std::swap(good_, other->good_);
        std::swap(late_, other->late_);
        std::swap(lost_, other->lost_);
        std::swap(resync_, other->resync_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata UserStats_Stats::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = UserStats_Stats_descriptor_;
    metadata.reflection = UserStats_Stats_reflection_;
    return metadata;
  }


// -------------------------------------------------------------------

#ifndef _MSC_VER
  const int UserStats::kSessionFieldNumber;
  const int UserStats::kStatsOnlyFieldNumber;
  const int UserStats::kCertificatesFieldNumber;
  const int UserStats::kFromClientFieldNumber;
  const int UserStats::kFromServerFieldNumber;
  const int UserStats::kUdpPacketsFieldNumber;
  const int UserStats::kTcpPacketsFieldNumber;
  const int UserStats::kUdpPingAvgFieldNumber;
  const int UserStats::kUdpPingVarFieldNumber;
  const int UserStats::kTcpPingAvgFieldNumber;
  const int UserStats::kTcpPingVarFieldNumber;
  const int UserStats::kVersionFieldNumber;
  const int UserStats::kCeltVersionsFieldNumber;
  const int UserStats::kAddressFieldNumber;
  const int UserStats::kBandwidthFieldNumber;
  const int UserStats::kOnlinesecsFieldNumber;
  const int UserStats::kIdlesecsFieldNumber;
  const int UserStats::kStrongCertificateFieldNumber;
  const int UserStats::kOpusFieldNumber;
#endif  // !_MSC_VER

  UserStats::UserStats()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.UserStats)
  }

  void UserStats::InitAsDefaultInstance()
  {
    from_client_ = const_cast< ::MumbleProto::UserStats_Stats*>
                   (&::MumbleProto::UserStats_Stats::default_instance());
    from_server_ = const_cast< ::MumbleProto::UserStats_Stats*>
                   (&::MumbleProto::UserStats_Stats::default_instance());
    version_ = const_cast< ::MumbleProto::Version*>
               (&::MumbleProto::Version::default_instance());
  }

  UserStats::UserStats(const UserStats& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.UserStats)
  }

  void UserStats::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    session_ = 0u;
    stats_only_ = false;
    from_client_ = NULL;
    from_server_ = NULL;
    udp_packets_ = 0u;
    tcp_packets_ = 0u;
    udp_ping_avg_ = 0;
    udp_ping_var_ = 0;
    tcp_ping_avg_ = 0;
    tcp_ping_var_ = 0;
    version_ = NULL;
    address_ = const_cast< ::std::string*>
               (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    bandwidth_ = 0u;
    onlinesecs_ = 0u;
    idlesecs_ = 0u;
    strong_certificate_ = false;
    opus_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  UserStats::~UserStats()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.UserStats)
    SharedDtor();
  }

  void UserStats::SharedDtor()
  {
    if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete address_;
      }
    if (this != default_instance_)
      {
        delete from_client_;
        delete from_server_;
        delete version_;
      }
  }

  void UserStats::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* UserStats::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return UserStats_descriptor_;
  }

  const UserStats& UserStats::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  UserStats* UserStats::default_instance_ = NULL;

  UserStats* UserStats::New() const
  {
    return new UserStats;
  }

  void UserStats::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 251)
      {
        ZR_(session_, udp_packets_);
        ZR_(tcp_packets_, udp_ping_avg_);
        stats_only_ = false;
        if (has_from_client())
          {
            if (from_client_ != NULL) from_client_->::MumbleProto::UserStats_Stats::Clear();
          }
        if (has_from_server())
          {
            if (from_server_ != NULL) from_server_->::MumbleProto::UserStats_Stats::Clear();
          }
      }
    if (_has_bits_[8 / 32] & 61184)
      {
        ZR_(udp_ping_var_, tcp_ping_avg_);
        ZR_(bandwidth_, onlinesecs_);
        tcp_ping_var_ = 0;
        if (has_version())
          {
            if (version_ != NULL) version_->::MumbleProto::Version::Clear();
          }
        if (has_address())
          {
            if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                address_->clear();
              }
          }
      }
    if (_has_bits_[16 / 32] & 458752)
      {
        ZR_(strong_certificate_, opus_);
        idlesecs_ = 0u;
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    certificates_.Clear();
    celt_versions_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool UserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.UserStats)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              16383);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 session = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &session_)));
                set_has_session();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_stats_only;
            break;
          }

          // optional bool stats_only = 2 [default = false];
          case 2:
          {
            if (tag == 16)
              {
parse_stats_only:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &stats_only_)));
                set_has_stats_only();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_certificates;
            break;
          }

          // repeated bytes certificates = 3;
          case 3:
          {
            if (tag == 26)
              {
parse_certificates:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->add_certificates()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(26)) goto parse_certificates;
            if (input->ExpectTag(34)) goto parse_from_client;
            break;
          }

          // optional .MumbleProto.UserStats.Stats from_client = 4;
          case 4:
          {
            if (tag == 34)
              {
parse_from_client:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                      input, mutable_from_client()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(42)) goto parse_from_server;
            break;
          }

          // optional .MumbleProto.UserStats.Stats from_server = 5;
          case 5:
          {
            if (tag == 42)
              {
parse_from_server:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                      input, mutable_from_server()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(48)) goto parse_udp_packets;
            break;
          }

          // optional uint32 udp_packets = 6;
          case 6:
          {
            if (tag == 48)
              {
parse_udp_packets:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &udp_packets_)));
                set_has_udp_packets();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(56)) goto parse_tcp_packets;
            break;
          }

          // optional uint32 tcp_packets = 7;
          case 7:
          {
            if (tag == 56)
              {
parse_tcp_packets:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &tcp_packets_)));
                set_has_tcp_packets();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(69)) goto parse_udp_ping_avg;
            break;
          }

          // optional float udp_ping_avg = 8;
          case 8:
          {
            if (tag == 69)
              {
parse_udp_ping_avg:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                       input, &udp_ping_avg_)));
                set_has_udp_ping_avg();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(77)) goto parse_udp_ping_var;
            break;
          }

          // optional float udp_ping_var = 9;
          case 9:
          {
            if (tag == 77)
              {
parse_udp_ping_var:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                       input, &udp_ping_var_)));
                set_has_udp_ping_var();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(85)) goto parse_tcp_ping_avg;
            break;
          }

          // optional float tcp_ping_avg = 10;
          case 10:
          {
            if (tag == 85)
              {
parse_tcp_ping_avg:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                       input, &tcp_ping_avg_)));
                set_has_tcp_ping_avg();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(93)) goto parse_tcp_ping_var;
            break;
          }

          // optional float tcp_ping_var = 11;
          case 11:
          {
            if (tag == 93)
              {
parse_tcp_ping_var:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                       input, &tcp_ping_var_)));
                set_has_tcp_ping_var();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(98)) goto parse_version;
            break;
          }

          // optional .MumbleProto.Version version = 12;
          case 12:
          {
            if (tag == 98)
              {
parse_version:
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                      input, mutable_version()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(104)) goto parse_celt_versions;
            break;
          }

          // repeated int32 celt_versions = 13;
          case 13:
          {
            if (tag == 104)
              {
parse_celt_versions:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                       1, 104, input, this->mutable_celt_versions())));
              }
            else if (tag == 106)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                       input, this->mutable_celt_versions())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(104)) goto parse_celt_versions;
            if (input->ExpectTag(114)) goto parse_address;
            break;
          }

          // optional bytes address = 14;
          case 14:
          {
            if (tag == 114)
              {
parse_address:
                DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                      input, this->mutable_address()));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(120)) goto parse_bandwidth;
            break;
          }

          // optional uint32 bandwidth = 15;
          case 15:
          {
            if (tag == 120)
              {
parse_bandwidth:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &bandwidth_)));
                set_has_bandwidth();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(128)) goto parse_onlinesecs;
            break;
          }

          // optional uint32 onlinesecs = 16;
          case 16:
          {
            if (tag == 128)
              {
parse_onlinesecs:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &onlinesecs_)));
                set_has_onlinesecs();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(136)) goto parse_idlesecs;
            break;
          }

          // optional uint32 idlesecs = 17;
          case 17:
          {
            if (tag == 136)
              {
parse_idlesecs:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &idlesecs_)));
                set_has_idlesecs();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(144)) goto parse_strong_certificate;
            break;
          }

          // optional bool strong_certificate = 18 [default = false];
          case 18:
          {
            if (tag == 144)
              {
parse_strong_certificate:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &strong_certificate_)));
                set_has_strong_certificate();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(152)) goto parse_opus;
            break;
          }

          // optional bool opus = 19 [default = false];
          case 19:
          {
            if (tag == 152)
              {
parse_opus:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &opus_)));
                set_has_opus();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.UserStats)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.UserStats)
    return false;
#undef DO_
  }

  void UserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.UserStats)
    // optional uint32 session = 1;
    if (has_session())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session(),
            output);
      }

    // optional bool stats_only = 2 [default = false];
    if (has_stats_only())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stats_only(),
            output);
      }

    // repeated bytes certificates = 3;
    for (int i = 0; i < this->certificates_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytes(
          3, this->certificates(i), output);
      }

    // optional .MumbleProto.UserStats.Stats from_client = 4;
    if (has_from_client())
      {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          4, this->from_client(), output);
      }

    // optional .MumbleProto.UserStats.Stats from_server = 5;
    if (has_from_server())
      {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          5, this->from_server(), output);
      }

    // optional uint32 udp_packets = 6;
    if (has_udp_packets())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(6,
            this->udp_packets(), output);
      }

    // optional uint32 tcp_packets = 7;
    if (has_tcp_packets())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(7,
            this->tcp_packets(), output);
      }

    // optional float udp_ping_avg = 8;
    if (has_udp_ping_avg())
      {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(8,
            this->udp_ping_avg(), output);
      }

    // optional float udp_ping_var = 9;
    if (has_udp_ping_var())
      {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9,
            this->udp_ping_var(), output);
      }

    // optional float tcp_ping_avg = 10;
    if (has_tcp_ping_avg())
      {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(10,
            this->tcp_ping_avg(), output);
      }

    // optional float tcp_ping_var = 11;
    if (has_tcp_ping_var())
      {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(11,
            this->tcp_ping_var(), output);
      }

    // optional .MumbleProto.Version version = 12;
    if (has_version())
      {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          12, this->version(), output);
      }

    // repeated int32 celt_versions = 13;
    for (int i = 0; i < this->celt_versions_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(
          13, this->celt_versions(i), output);
      }

    // optional bytes address = 14;
    if (has_address())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
          14, this->address(), output);
      }

    // optional uint32 bandwidth = 15;
    if (has_bandwidth())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bandwidth(),
            output);
      }

    // optional uint32 onlinesecs = 16;
    if (has_onlinesecs())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(16,
            this->onlinesecs(), output);
      }

    // optional uint32 idlesecs = 17;
    if (has_idlesecs())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->idlesecs(),
            output);
      }

    // optional bool strong_certificate = 18 [default = false];
    if (has_strong_certificate())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(18,
            this->strong_certificate(), output);
      }

    // optional bool opus = 19 [default = false];
    if (has_opus())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->opus(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.UserStats)
  }

  ::google::protobuf::uint8* UserStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.UserStats)
    // optional uint32 session = 1;
    if (has_session())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->session(), target);
      }

    // optional bool stats_only = 2 [default = false];
    if (has_stats_only())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2,
                 this->stats_only(), target);
      }

    // repeated bytes certificates = 3;
    for (int i = 0; i < this->certificates_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteBytesToArray(3, this->certificates(i), target);
      }

    // optional .MumbleProto.UserStats.Stats from_client = 4;
    if (has_from_client())
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteMessageNoVirtualToArray(
                   4, this->from_client(), target);
      }

    // optional .MumbleProto.UserStats.Stats from_server = 5;
    if (has_from_server())
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteMessageNoVirtualToArray(
                   5, this->from_server(), target);
      }

    // optional uint32 udp_packets = 6;
    if (has_udp_packets())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6,
                 this->udp_packets(), target);
      }

    // optional uint32 tcp_packets = 7;
    if (has_tcp_packets())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7,
                 this->tcp_packets(), target);
      }

    // optional float udp_ping_avg = 8;
    if (has_udp_ping_avg())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8,
                 this->udp_ping_avg(), target);
      }

    // optional float udp_ping_var = 9;
    if (has_udp_ping_var())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9,
                 this->udp_ping_var(), target);
      }

    // optional float tcp_ping_avg = 10;
    if (has_tcp_ping_avg())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10,
                 this->tcp_ping_avg(), target);
      }

    // optional float tcp_ping_var = 11;
    if (has_tcp_ping_var())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11,
                 this->tcp_ping_var(), target);
      }

    // optional .MumbleProto.Version version = 12;
    if (has_version())
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteMessageNoVirtualToArray(
                   12, this->version(), target);
      }

    // repeated int32 celt_versions = 13;
    for (int i = 0; i < this->celt_versions_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteInt32ToArray(13, this->celt_versions(i), target);
      }

    // optional bytes address = 14;
    if (has_address())
      {
        target =
          ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
            14, this->address(), target);
      }

    // optional uint32 bandwidth = 15;
    if (has_bandwidth())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15,
                 this->bandwidth(), target);
      }

    // optional uint32 onlinesecs = 16;
    if (has_onlinesecs())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16,
                 this->onlinesecs(), target);
      }

    // optional uint32 idlesecs = 17;
    if (has_idlesecs())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17,
                 this->idlesecs(), target);
      }

    // optional bool strong_certificate = 18 [default = false];
    if (has_strong_certificate())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18,
                 this->strong_certificate(), target);
      }

    // optional bool opus = 19 [default = false];
    if (has_opus())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19,
                 this->opus(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.UserStats)
    return target;
  }

  int UserStats::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 session = 1;
        if (has_session())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->session());
          }

        // optional bool stats_only = 2 [default = false];
        if (has_stats_only())
          {
            total_size += 1 + 1;
          }

        // optional .MumbleProto.UserStats.Stats from_client = 4;
        if (has_from_client())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                            this->from_client());
          }

        // optional .MumbleProto.UserStats.Stats from_server = 5;
        if (has_from_server())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                            this->from_server());
          }

        // optional uint32 udp_packets = 6;
        if (has_udp_packets())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->udp_packets());
          }

        // optional uint32 tcp_packets = 7;
        if (has_tcp_packets())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->tcp_packets());
          }

        // optional float udp_ping_avg = 8;
        if (has_udp_ping_avg())
          {
            total_size += 1 + 4;
          }

      }
    if (_has_bits_[8 / 32] & (0xffu << (8 % 32)))
      {
        // optional float udp_ping_var = 9;
        if (has_udp_ping_var())
          {
            total_size += 1 + 4;
          }

        // optional float tcp_ping_avg = 10;
        if (has_tcp_ping_avg())
          {
            total_size += 1 + 4;
          }

        // optional float tcp_ping_var = 11;
        if (has_tcp_ping_var())
          {
            total_size += 1 + 4;
          }

        // optional .MumbleProto.Version version = 12;
        if (has_version())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                            this->version());
          }

        // optional bytes address = 14;
        if (has_address())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->address());
          }

        // optional uint32 bandwidth = 15;
        if (has_bandwidth())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->bandwidth());
          }

        // optional uint32 onlinesecs = 16;
        if (has_onlinesecs())
          {
            total_size += 2 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->onlinesecs());
          }

      }
    if (_has_bits_[16 / 32] & (0xffu << (16 % 32)))
      {
        // optional uint32 idlesecs = 17;
        if (has_idlesecs())
          {
            total_size += 2 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->idlesecs());
          }

        // optional bool strong_certificate = 18 [default = false];
        if (has_strong_certificate())
          {
            total_size += 2 + 1;
          }

        // optional bool opus = 19 [default = false];
        if (has_opus())
          {
            total_size += 2 + 1;
          }

      }
    // repeated bytes certificates = 3;
    total_size += 1 * this->certificates_size();
    for (int i = 0; i < this->certificates_size(); i++)
      {
        total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
                        this->certificates(i));
      }

    // repeated int32 celt_versions = 13;
    {
      int data_size = 0;
      for (int i = 0; i < this->celt_versions_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       Int32Size(this->celt_versions(i));
        }
      total_size += 1 * this->celt_versions_size() + data_size;
    }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void UserStats::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const UserStats* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const UserStats*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void UserStats::MergeFrom(const UserStats& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    certificates_.MergeFrom(from.certificates_);
    celt_versions_.MergeFrom(from.celt_versions_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_session())
          {
            set_session(from.session());
          }
        if (from.has_stats_only())
          {
            set_stats_only(from.stats_only());
          }
        if (from.has_from_client())
          {
            mutable_from_client()->::MumbleProto::UserStats_Stats::MergeFrom(
              from.from_client());
          }
        if (from.has_from_server())
          {
            mutable_from_server()->::MumbleProto::UserStats_Stats::MergeFrom(
              from.from_server());
          }
        if (from.has_udp_packets())
          {
            set_udp_packets(from.udp_packets());
          }
        if (from.has_tcp_packets())
          {
            set_tcp_packets(from.tcp_packets());
          }
        if (from.has_udp_ping_avg())
          {
            set_udp_ping_avg(from.udp_ping_avg());
          }
      }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32)))
      {
        if (from.has_udp_ping_var())
          {
            set_udp_ping_var(from.udp_ping_var());
          }
        if (from.has_tcp_ping_avg())
          {
            set_tcp_ping_avg(from.tcp_ping_avg());
          }
        if (from.has_tcp_ping_var())
          {
            set_tcp_ping_var(from.tcp_ping_var());
          }
        if (from.has_version())
          {
            mutable_version()->::MumbleProto::Version::MergeFrom(from.version());
          }
        if (from.has_address())
          {
            set_address(from.address());
          }
        if (from.has_bandwidth())
          {
            set_bandwidth(from.bandwidth());
          }
        if (from.has_onlinesecs())
          {
            set_onlinesecs(from.onlinesecs());
          }
      }
    if (from._has_bits_[16 / 32] & (0xffu << (16 % 32)))
      {
        if (from.has_idlesecs())
          {
            set_idlesecs(from.idlesecs());
          }
        if (from.has_strong_certificate())
          {
            set_strong_certificate(from.strong_certificate());
          }
        if (from.has_opus())
          {
            set_opus(from.opus());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void UserStats::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void UserStats::CopyFrom(const UserStats& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool UserStats::IsInitialized() const
  {

    return true;
  }

  void UserStats::Swap(UserStats* other)
  {
    if (other != this)
      {
        std::swap(session_, other->session_);
        std::swap(stats_only_, other->stats_only_);
        certificates_.Swap(&other->certificates_);
        std::swap(from_client_, other->from_client_);
        std::swap(from_server_, other->from_server_);
        std::swap(udp_packets_, other->udp_packets_);
        std::swap(tcp_packets_, other->tcp_packets_);
        std::swap(udp_ping_avg_, other->udp_ping_avg_);
        std::swap(udp_ping_var_, other->udp_ping_var_);
        std::swap(tcp_ping_avg_, other->tcp_ping_avg_);
        std::swap(tcp_ping_var_, other->tcp_ping_var_);
        std::swap(version_, other->version_);
        celt_versions_.Swap(&other->celt_versions_);
        std::swap(address_, other->address_);
        std::swap(bandwidth_, other->bandwidth_);
        std::swap(onlinesecs_, other->onlinesecs_);
        std::swap(idlesecs_, other->idlesecs_);
        std::swap(strong_certificate_, other->strong_certificate_);
        std::swap(opus_, other->opus_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata UserStats::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = UserStats_descriptor_;
    metadata.reflection = UserStats_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int RequestBlob::kSessionTextureFieldNumber;
  const int RequestBlob::kSessionCommentFieldNumber;
  const int RequestBlob::kChannelDescriptionFieldNumber;
#endif  // !_MSC_VER

  RequestBlob::RequestBlob()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.RequestBlob)
  }

  void RequestBlob::InitAsDefaultInstance()
  {
  }

  RequestBlob::RequestBlob(const RequestBlob& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.RequestBlob)
  }

  void RequestBlob::SharedCtor()
  {
    _cached_size_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  RequestBlob::~RequestBlob()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.RequestBlob)
    SharedDtor();
  }

  void RequestBlob::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void RequestBlob::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* RequestBlob::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return RequestBlob_descriptor_;
  }

  const RequestBlob& RequestBlob::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  RequestBlob* RequestBlob::default_instance_ = NULL;

  RequestBlob* RequestBlob::New() const
  {
    return new RequestBlob;
  }

  void RequestBlob::Clear()
  {
    session_texture_.Clear();
    session_comment_.Clear();
    channel_description_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool RequestBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.RequestBlob)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // repeated uint32 session_texture = 1;
          case 1:
          {
            if (tag == 8)
              {
parse_session_texture:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 8, input, this->mutable_session_texture())));
              }
            else if (tag == 10)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_session_texture())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(8)) goto parse_session_texture;
            if (input->ExpectTag(16)) goto parse_session_comment;
            break;
          }

          // repeated uint32 session_comment = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_session_comment:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 16, input, this->mutable_session_comment())));
              }
            else if (tag == 18)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_session_comment())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_session_comment;
            if (input->ExpectTag(24)) goto parse_channel_description;
            break;
          }

          // repeated uint32 channel_description = 3;
          case 3:
          {
            if (tag == 24)
              {
parse_channel_description:
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       1, 24, input, this->mutable_channel_description())));
              }
            else if (tag == 26)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, this->mutable_channel_description())));
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_channel_description;
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.RequestBlob)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.RequestBlob)
    return false;
#undef DO_
  }

  void RequestBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.RequestBlob)
    // repeated uint32 session_texture = 1;
    for (int i = 0; i < this->session_texture_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          1, this->session_texture(i), output);
      }

    // repeated uint32 session_comment = 2;
    for (int i = 0; i < this->session_comment_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          2, this->session_comment(i), output);
      }

    // repeated uint32 channel_description = 3;
    for (int i = 0; i < this->channel_description_size(); i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
          3, this->channel_description(i), output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.RequestBlob)
  }

  ::google::protobuf::uint8* RequestBlob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.RequestBlob)
    // repeated uint32 session_texture = 1;
    for (int i = 0; i < this->session_texture_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(1, this->session_texture(i), target);
      }

    // repeated uint32 session_comment = 2;
    for (int i = 0; i < this->session_comment_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(2, this->session_comment(i), target);
      }

    // repeated uint32 channel_description = 3;
    for (int i = 0; i < this->channel_description_size(); i++)
      {
        target = ::google::protobuf::internal::WireFormatLite::
                 WriteUInt32ToArray(3, this->channel_description(i), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.RequestBlob)
    return target;
  }

  int RequestBlob::ByteSize() const
  {
    int total_size = 0;

    // repeated uint32 session_texture = 1;
    {
      int data_size = 0;
      for (int i = 0; i < this->session_texture_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->session_texture(i));
        }
      total_size += 1 * this->session_texture_size() + data_size;
    }

    // repeated uint32 session_comment = 2;
    {
      int data_size = 0;
      for (int i = 0; i < this->session_comment_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->session_comment(i));
        }
      total_size += 1 * this->session_comment_size() + data_size;
    }

    // repeated uint32 channel_description = 3;
    {
      int data_size = 0;
      for (int i = 0; i < this->channel_description_size(); i++)
        {
          data_size += ::google::protobuf::internal::WireFormatLite::
                       UInt32Size(this->channel_description(i));
        }
      total_size += 1 * this->channel_description_size() + data_size;
    }

    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void RequestBlob::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const RequestBlob* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const RequestBlob*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void RequestBlob::MergeFrom(const RequestBlob& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    session_texture_.MergeFrom(from.session_texture_);
    session_comment_.MergeFrom(from.session_comment_);
    channel_description_.MergeFrom(from.channel_description_);
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void RequestBlob::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void RequestBlob::CopyFrom(const RequestBlob& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool RequestBlob::IsInitialized() const
  {

    return true;
  }

  void RequestBlob::Swap(RequestBlob* other)
  {
    if (other != this)
      {
        session_texture_.Swap(&other->session_texture_);
        session_comment_.Swap(&other->session_comment_);
        channel_description_.Swap(&other->channel_description_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata RequestBlob::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = RequestBlob_descriptor_;
    metadata.reflection = RequestBlob_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int ServerConfig::kMaxBandwidthFieldNumber;
  const int ServerConfig::kWelcomeTextFieldNumber;
  const int ServerConfig::kAllowHtmlFieldNumber;
  const int ServerConfig::kMessageLengthFieldNumber;
  const int ServerConfig::kImageMessageLengthFieldNumber;
  const int ServerConfig::kMaxUsersFieldNumber;
#endif  // !_MSC_VER

  ServerConfig::ServerConfig()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.ServerConfig)
  }

  void ServerConfig::InitAsDefaultInstance()
  {
  }

  ServerConfig::ServerConfig(const ServerConfig& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.ServerConfig)
  }

  void ServerConfig::SharedCtor()
  {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    max_bandwidth_ = 0u;
    welcome_text_ = const_cast< ::std::string*>
                    (&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    allow_html_ = false;
    message_length_ = 0u;
    image_message_length_ = 0u;
    max_users_ = 0u;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  ServerConfig::~ServerConfig()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.ServerConfig)
    SharedDtor();
  }

  void ServerConfig::SharedDtor()
  {
    if (welcome_text_ !=
        &::google::protobuf::internal::GetEmptyStringAlreadyInited())
      {
        delete welcome_text_;
      }
    if (this != default_instance_)
      {
      }
  }

  void ServerConfig::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* ServerConfig::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return ServerConfig_descriptor_;
  }

  const ServerConfig& ServerConfig::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  ServerConfig* ServerConfig::default_instance_ = NULL;

  ServerConfig* ServerConfig::New() const
  {
    return new ServerConfig;
  }

  void ServerConfig::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 63)
      {
        ZR_(max_bandwidth_, max_users_);
        if (has_welcome_text())
          {
            if (welcome_text_ !=
                &::google::protobuf::internal::GetEmptyStringAlreadyInited())
              {
                welcome_text_->clear();
              }
          }
      }

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.ServerConfig)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 max_bandwidth = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &max_bandwidth_)));
                set_has_max_bandwidth();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(18)) goto parse_welcome_text;
            break;
          }

          // optional string welcome_text = 2;
          case 2:
          {
            if (tag == 18)
              {
parse_welcome_text:
                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                      input, this->mutable_welcome_text()));
                ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                  this->welcome_text().data(), this->welcome_text().length(),
                  ::google::protobuf::internal::WireFormat::PARSE,
                  "welcome_text");
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_allow_html;
            break;
          }

          // optional bool allow_html = 3;
          case 3:
          {
            if (tag == 24)
              {
parse_allow_html:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &allow_html_)));
                set_has_allow_html();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(32)) goto parse_message_length;
            break;
          }

          // optional uint32 message_length = 4;
          case 4:
          {
            if (tag == 32)
              {
parse_message_length:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &message_length_)));
                set_has_message_length();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(40)) goto parse_image_message_length;
            break;
          }

          // optional uint32 image_message_length = 5;
          case 5:
          {
            if (tag == 40)
              {
parse_image_message_length:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &image_message_length_)));
                set_has_image_message_length();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(48)) goto parse_max_users;
            break;
          }

          // optional uint32 max_users = 6;
          case 6:
          {
            if (tag == 48)
              {
parse_max_users:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &max_users_)));
                set_has_max_users();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.ServerConfig)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.ServerConfig)
    return false;
#undef DO_
  }

  void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.ServerConfig)
    // optional uint32 max_bandwidth = 1;
    if (has_max_bandwidth())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1,
            this->max_bandwidth(), output);
      }

    // optional string welcome_text = 2;
    if (has_welcome_text())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->welcome_text().data(), this->welcome_text().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "welcome_text");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
          2, this->welcome_text(), output);
      }

    // optional bool allow_html = 3;
    if (has_allow_html())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allow_html(),
            output);
      }

    // optional uint32 message_length = 4;
    if (has_message_length())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4,
            this->message_length(), output);
      }

    // optional uint32 image_message_length = 5;
    if (has_image_message_length())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(5,
            this->image_message_length(), output);
      }

    // optional uint32 max_users = 6;
    if (has_max_users())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_users(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.ServerConfig)
  }

  ::google::protobuf::uint8* ServerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.ServerConfig)
    // optional uint32 max_bandwidth = 1;
    if (has_max_bandwidth())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->max_bandwidth(), target);
      }

    // optional string welcome_text = 2;
    if (has_welcome_text())
      {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          this->welcome_text().data(), this->welcome_text().length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "welcome_text");
        target =
          ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
            2, this->welcome_text(), target);
      }

    // optional bool allow_html = 3;
    if (has_allow_html())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3,
                 this->allow_html(), target);
      }

    // optional uint32 message_length = 4;
    if (has_message_length())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4,
                 this->message_length(), target);
      }

    // optional uint32 image_message_length = 5;
    if (has_image_message_length())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5,
                 this->image_message_length(), target);
      }

    // optional uint32 max_users = 6;
    if (has_max_users())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6,
                 this->max_users(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.ServerConfig)
    return target;
  }

  int ServerConfig::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 max_bandwidth = 1;
        if (has_max_bandwidth())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->max_bandwidth());
          }

        // optional string welcome_text = 2;
        if (has_welcome_text())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                            this->welcome_text());
          }

        // optional bool allow_html = 3;
        if (has_allow_html())
          {
            total_size += 1 + 1;
          }

        // optional uint32 message_length = 4;
        if (has_message_length())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->message_length());
          }

        // optional uint32 image_message_length = 5;
        if (has_image_message_length())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->image_message_length());
          }

        // optional uint32 max_users = 6;
        if (has_max_users())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->max_users());
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void ServerConfig::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const ServerConfig* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const ServerConfig*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void ServerConfig::MergeFrom(const ServerConfig& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_max_bandwidth())
          {
            set_max_bandwidth(from.max_bandwidth());
          }
        if (from.has_welcome_text())
          {
            set_welcome_text(from.welcome_text());
          }
        if (from.has_allow_html())
          {
            set_allow_html(from.allow_html());
          }
        if (from.has_message_length())
          {
            set_message_length(from.message_length());
          }
        if (from.has_image_message_length())
          {
            set_image_message_length(from.image_message_length());
          }
        if (from.has_max_users())
          {
            set_max_users(from.max_users());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void ServerConfig::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void ServerConfig::CopyFrom(const ServerConfig& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool ServerConfig::IsInitialized() const
  {

    return true;
  }

  void ServerConfig::Swap(ServerConfig* other)
  {
    if (other != this)
      {
        std::swap(max_bandwidth_, other->max_bandwidth_);
        std::swap(welcome_text_, other->welcome_text_);
        std::swap(allow_html_, other->allow_html_);
        std::swap(message_length_, other->message_length_);
        std::swap(image_message_length_, other->image_message_length_);
        std::swap(max_users_, other->max_users_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata ServerConfig::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = ServerConfig_descriptor_;
    metadata.reflection = ServerConfig_reflection_;
    return metadata;
  }


// ===================================================================

#ifndef _MSC_VER
  const int SuggestConfig::kVersionFieldNumber;
  const int SuggestConfig::kPositionalFieldNumber;
  const int SuggestConfig::kPushToTalkFieldNumber;
#endif  // !_MSC_VER

  SuggestConfig::SuggestConfig()
    : ::google::protobuf::Message()
  {
    SharedCtor();
    // @@protoc_insertion_point(constructor:MumbleProto.SuggestConfig)
  }

  void SuggestConfig::InitAsDefaultInstance()
  {
  }

  SuggestConfig::SuggestConfig(const SuggestConfig& from)
    : ::google::protobuf::Message()
  {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:MumbleProto.SuggestConfig)
  }

  void SuggestConfig::SharedCtor()
  {
    _cached_size_ = 0;
    version_ = 0u;
    positional_ = false;
    push_to_talk_ = false;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
  }

  SuggestConfig::~SuggestConfig()
  {
    // @@protoc_insertion_point(destructor:MumbleProto.SuggestConfig)
    SharedDtor();
  }

  void SuggestConfig::SharedDtor()
  {
    if (this != default_instance_)
      {
      }
  }

  void SuggestConfig::SetCachedSize(int size) const
  {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor* SuggestConfig::descriptor()
  {
    protobuf_AssignDescriptorsOnce();
    return SuggestConfig_descriptor_;
  }

  const SuggestConfig& SuggestConfig::default_instance()
  {
    if (default_instance_ == NULL) protobuf_AddDesc_Mumble_2eproto();
    return *default_instance_;
  }

  SuggestConfig* SuggestConfig::default_instance_ = NULL;

  SuggestConfig* SuggestConfig::New() const
  {
    return new SuggestConfig;
  }

  void SuggestConfig::Clear()
  {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SuggestConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    ZR_(version_, push_to_talk_);

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
  }

  bool SuggestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
  {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:MumbleProto.SuggestConfig)
    for (;;)
      {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(
              127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
          {
          // optional uint32 version = 1;
          case 1:
          {
            if (tag == 8)
              {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                       input, &version_)));
                set_has_version();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(16)) goto parse_positional;
            break;
          }

          // optional bool positional = 2;
          case 2:
          {
            if (tag == 16)
              {
parse_positional:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &positional_)));
                set_has_positional();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectTag(24)) goto parse_push_to_talk;
            break;
          }

          // optional bool push_to_talk = 3;
          case 3:
          {
            if (tag == 24)
              {
parse_push_to_talk:
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                       input, &push_to_talk_)));
                set_has_push_to_talk();
              }
            else
              {
                goto handle_unusual;
              }
            if (input->ExpectAtEnd()) goto success;
            break;
          }

          default:
          {
handle_unusual:
            if (tag == 0 ||
                ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
              {
                goto success;
              }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                  input, tag, mutable_unknown_fields()));
            break;
          }
          }
      }
success:
    // @@protoc_insertion_point(parse_success:MumbleProto.SuggestConfig)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:MumbleProto.SuggestConfig)
    return false;
#undef DO_
  }

  void SuggestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
  {
    // @@protoc_insertion_point(serialize_start:MumbleProto.SuggestConfig)
    // optional uint32 version = 1;
    if (has_version())
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(),
            output);
      }

    // optional bool positional = 2;
    if (has_positional())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->positional(),
            output);
      }

    // optional bool push_to_talk = 3;
    if (has_push_to_talk())
      {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->push_to_talk(),
            output);
      }

    if (!unknown_fields().empty())
      {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
          unknown_fields(), output);
      }
    // @@protoc_insertion_point(serialize_end:MumbleProto.SuggestConfig)
  }

  ::google::protobuf::uint8* SuggestConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:MumbleProto.SuggestConfig)
    // optional uint32 version = 1;
    if (has_version())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1,
                 this->version(), target);
      }

    // optional bool positional = 2;
    if (has_positional())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2,
                 this->positional(), target);
      }

    // optional bool push_to_talk = 3;
    if (has_push_to_talk())
      {
        target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3,
                 this->push_to_talk(), target);
      }

    if (!unknown_fields().empty())
      {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                   unknown_fields(), target);
      }
    // @@protoc_insertion_point(serialize_to_array_end:MumbleProto.SuggestConfig)
    return target;
  }

  int SuggestConfig::ByteSize() const
  {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        // optional uint32 version = 1;
        if (has_version())
          {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::UInt32Size(
                            this->version());
          }

        // optional bool positional = 2;
        if (has_positional())
          {
            total_size += 1 + 1;
          }

        // optional bool push_to_talk = 3;
        if (has_push_to_talk())
          {
            total_size += 1 + 1;
          }

      }
    if (!unknown_fields().empty())
      {
        total_size +=
          ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
      }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
  }

  void SuggestConfig::MergeFrom(const ::google::protobuf::Message& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    const SuggestConfig* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const SuggestConfig*>(
        &from);
    if (source == NULL)
      {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      }
    else
      {
        MergeFrom(*source);
      }
  }

  void SuggestConfig::MergeFrom(const SuggestConfig& from)
  {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
      {
        if (from.has_version())
          {
            set_version(from.version());
          }
        if (from.has_positional())
          {
            set_positional(from.positional());
          }
        if (from.has_push_to_talk())
          {
            set_push_to_talk(from.push_to_talk());
          }
      }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }

  void SuggestConfig::CopyFrom(const ::google::protobuf::Message& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  void SuggestConfig::CopyFrom(const SuggestConfig& from)
  {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
  }

  bool SuggestConfig::IsInitialized() const
  {

    return true;
  }

  void SuggestConfig::Swap(SuggestConfig* other)
  {
    if (other != this)
      {
        std::swap(version_, other->version_);
        std::swap(positional_, other->positional_);
        std::swap(push_to_talk_, other->push_to_talk_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
      }
  }

  ::google::protobuf::Metadata SuggestConfig::GetMetadata() const
  {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = SuggestConfig_descriptor_;
    metadata.reflection = SuggestConfig_reflection_;
    return metadata;
  }


// @@protoc_insertion_point(namespace_scope)

}  // namespace MumbleProto

// @@protoc_insertion_point(global_scope)
